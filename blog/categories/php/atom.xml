<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: php | mumumu の日記]]></title>
  <link href="http://mumumu.github.io/blog/categories/php/atom.xml" rel="self"/>
  <link href="http://mumumu.github.io/"/>
  <updated>2018-02-25T00:42:31+09:00</updated>
  <id>http://mumumu.github.io/</id>
  <author>
    <name><![CDATA[mumumu(Yoshinari Takaoka)]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Current status of the PHP Documentation]]></title>
    <link href="http://mumumu.github.io/blog/2013/12/08/current-status-of-the-php-documentation/"/>
    <updated>2013-12-08T00:00:00+09:00</updated>
    <id>http://mumumu.github.io/blog/2013/12/08/current-status-of-the-php-documentation</id>
    <content type="html"><![CDATA[<p>この記事は、<a href="http://qiita.com/advent-calendar/2013/docja">doc-ja Advent Calendar</a> 8日目の参加記事です。</p>

<p>ここでは、PHPを使うと必ず一度は目にするであろう <a href="http://www.php.net/manual/ja/">PHP マニュアル</a> についてつれづれと書いてみようと思います。「PHP のドキュメント」に関する日本語の文書が少なくなってきている気がすることが、このエントリを書く動機になっています。</p>

<h3>PHPマニュアル の現状をざっくりと</h3>

<p>PHP マニュアル はPHP 4系から現在 (このエントリを書いている時の最新は5.5.6) に至るまでの歴史が蓄積されており、非常に巨大なマニュアルです。これは <a href="http://www.docbook.org/">DocBook</a> を使って書かれており、それを適宜各ロケールの翻訳者がボランティアで日本語に置き換えていっています。それが php.net のインフラでビルドされ、週の一度 (正確には毎週金曜日の10:00 UTC) 世界中に公開されていくという具合です。</p>

<p>Docbook は、SGML 由来であることによって文書構造が複雑であることや、タグの構造が壊れてしまうと即ビルドが失敗してしまうなどの欠点によって、他のフォーマットに置き換えようという話がこれまで出なかったわけではありません。ですが、DocBook の多彩な表現力にとってかわることと、現在までの巨大な蓄積を効率的に置き換えられる代替案を誰かが示せない限り、移行していくことはないでしょう。</p>

<p>バージョン管理システムは <a href="http://subversion.apache.org/">Subversion</a> です。えー今の御時世に(ry という声が聞こえてきそうですが、これも Docbook と同じく強いモチベーションと代替案を示すことができる誰かがいないと、というところでしょう。</p>

<h3>PHP マニュアル に間違いを見つけたら？</h3>

<p>既に述べたとおり、PHP マニュアル はボランティアベースで作られているため、常に完全な翻訳を維持できているわけではありません。現在でもたくさんの未訳部分が残っていますし、人間がやるモノである以上、常に間違いが存在し得ます。</p>

<p><a href="http://www.php.gr.jp">日本 PHP ユーザー会</a> では <a href="http://ml.php.gr.jp/mailman/listinfo/php-doc">php-doc ML</a> というメーリングリストをホストしており、ここを通じて PHPマニュアルに関する問い合わせや間違いの指摘などを受け付けています。ここで頂く多くの情報が、PHP マニュアル 日本語版の質の向上に大きく寄与していることは言うまでもありませんし、初期の頃からの多くの方々の協力によって現在のマニュアルは存在し、かつ維持されています。</p>

<p>また、<a href="http://bugs.php.net/">PHP のバグトラッカー</a> で Documentation Problem と記して英語でバグ報告をするのもアリですが、こちらは気付かれないことも多いので php-doc ML の方をドキュメントの指摘についてはお勧めしています。</p>

<h3>edit.php.net について</h3>

<p><a href="https://edit.php.net/">edit.php.net </a> は、PHPマニュアルのオンラインエディタです。コミット権限を持っていない人でもソースの修正ができますが、英語版をSubmitしてレビューさせるには適したエディタに仕上がっていますが、英語以外のロケールをコラボレートしながら編集しながら編集するにはまだまだといったところ。。Patch を提出しても英語版以外のコミッタにはわかんないし。って Yannik (このエディタの作者) に報告するかそうしよう(´ー｀; )</p>

<p>もう少しお勧めできるツールになればここでもまた紹介するかもしれません。</p>

<h3>対応したフォーマット</h3>

<p>PHP マニュアル は HTML や Windows の標準的なヘルプ形式である <a href="http://ja.wikipedia.org/wiki/Microsoft_Compiled_HTML_Help">chm</a> に対応したフォーマットが公開されていますが、Docbook からこれらの形式をビルドするための <a href="https://wiki.php.net/doc/phd">PhD</a> というツールが整備されています。これを使えばHTML形式のビルドは行えるようになっていますが、chm 形式については、それをビルドするのに Windows マシンの助けが必要です。PHP マニュアル のビルド方法については、以下に纏めておいたので参考にしてください。</p>

<p><a href="http://mumumu.github.io/blog/2013/06/29/php-manual-generate-howto/">PHP Manual Generate Howto(2013年6月29日版)</a></p>

<h3>PHP マニュアル のコミット権限を得るには？</h3>

<p>PHPマニュアルをいろいろ見ていくと、継続して改善すべきだというモチベーションが強まってくるかもしれません。PHP-doc ML で指摘しまくっていてそれにも飽き足らないという人は、コミット権限を得て自分で直すことも考えてもよいかもしれません。以下は、そういうモチベーションが高い人向けです。</p>

<p>PHPマニュアルのコミット権限を得るには、<a href="http://www.php.net/git-php.php">php.net のページで英語で申請をする</a> 必要があります。これを php.net の中の人が見てコミット権限を与えるかを決めているわけですが、彼らは何回か patch を提出した実績か、もしくは既存のコミッタの推薦があることを求めて来ます。patch については日本語版の PHP マニュアル の patch でも問題ないはずです。</p>

<p>基本的には <a href="http://ml.php.gr.jp/mailman/listinfo/php-doc">php-doc ML</a> に話を通してから申請し、既存の PHP マニュアル 日本語版のコミッタからの推薦を得た方が早く話が進むと思います (自分もそうやって <a href="http://d.hatena.ne.jp/takagimasahiro">高木さん</a> の推薦を貰いました) 。</p>

<p>尚、申請ページでは、最初から最後までちゃんと文章を読んでから申請フォームを埋めないと <strong>必ず失敗するようになっています</strong> ので気を付けてください。</p>

<h4>(番外編) chmファイルが壊れたのでホストを引き継いだ話</h4>

<p>さて、ここからちょっと本題からずれます。</p>

<p>PHPマニュアル の chm 版をビルドするには、上で紹介したとおり Windows の助けが必要です。よって、chmファイルは世界のどこかのボランティアの Windows マシンでビルドされ、それを php.net 側が吸い取って世界中に公開しているわけです。</p>

<p>今年の5月あたりから、この世界のどこかにあるボランティアのマシンが止まったらしく、<a href="https://bugs.php.net/bug.php?id=64842">chmファイルが壊れている</a> というバグレポートが届くようになりました。再現させようとしてみたところ、確かに<a href="http://svn.php.net/viewvc/phpdoc/doc-base/trunk/scripts/build-chms.php?r1=330908&amp;r2=330907&amp;pathrev=330908">ビルドシステムの一部が壊れていたのでそれを直し</a>、流石に Windows マシンをホストしている側がこのエラーに気付かんわけはあるまい、とその後は放置していました。</p>

<p>その後、私事でばたばたしたりなどしていて10月になりました。たまたま本家のメーリングリストを見ていると、「chm ファイルはどうなってるんだ？」 という問い合わせがあったのが目に付きました。</p>

<pre><code>&gt; On Fri, Oct 4, 2013 at 2:00 AM, Marvin D. &lt;marvin@phpugph.com&gt; wrote:
&gt; &gt; To whom it may concern,
&gt; &gt;
&gt; &gt; I just went to the downloads section of the php manual, and I can't seem
&gt; &gt; to find any downloadable file that is in ".chm" file format. when will that
&gt; &gt; format be available for downloads of the php manual?. 
&gt; 
&gt; We no longer have access to a Windows machine to build the CHM format
&gt; on, so we had to discontinue it.
&gt; Sorry
</code></pre>

<p>「chm ファイルのビルドは止まってるから配布不能だ」としれっとメインの人が答えているのを見て驚愕。 いったいこいつは何を言ってるんだ？ どうやら彼らの管理下にマシンはない模様。であれば、自分が chm のビルドやるよ、と言っても文句は出ないよね。ということで最近引き継ぎました。</p>

<p>基本は上で出したリンクでの <a href="http://mumumu.github.io/blog/2013/06/29/php-manual-generate-howto/">PHP Manual Generate Howto</a> を Windows でそのままやっただけですが、週に一度定期的にビルドしてアップロードする、という箇所を自動でやらないといけなかったので、そこは Dropbox と Jenkins で補完しました。 php.net の人たちはこれらを Windows でやるのが大変 Annoying なタスクと言ってましたが、確かに2000年代だとそうだったでしょう。2013 年には自動 sync やビルドツールが進化してくれていて大変助かりました(´ー｀; )</p>

<p>そんな感じで、日本の片隅でビルドした成果物が世界中に配られているわけです。翻訳をやる動機の一つって、翻訳の広がりをいろんな点で感じられることにあると個人的には思っているんですが、こうやってインフラを支えるのもそのひとつだね。と思いました。まる。</p>

<h3>まとめ</h3>

<p>・ 日本語PHPマニュアルの現状を紹介<br/>
・ マニュアルに間違いがあったら <a href="http://ml.php.gr.jp/mailman/listinfo/php-doc">php-doc ML</a> へ！！！１<br/>
・ インフラを支えることを手伝うのもまた良いことだ</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PHP manual generate HOWTO (version 2013-06-29)]]></title>
    <link href="http://mumumu.github.io/blog/2013/06/29/php-manual-generate-howto/"/>
    <updated>2013-06-29T16:16:00+09:00</updated>
    <id>http://mumumu.github.io/blog/2013/06/29/php-manual-generate-howto</id>
    <content type="html"><![CDATA[<p><a href="http://d.hatena.ne.jp/anatoo/20120430/1335725004">http://d.hatena.ne.jp/anatoo/20120430/1335725004</a></p>

<p>このエントリは、anatoo氏 による上記エントリの更新版である。<br/>
大筋は変わっていないが、細かい箇所を補足しているのと、chm に関する記述が少し増えている。</p>

<hr />

<p><br />
PHPのマニュアルは、DocBook と呼ばれるフォーマットで記述されており、<a href="https://wiki.php.net/doc/phd">PhD という PHPマニュアル のためのツール</a> によってその DocBook から HTML や CHM、PDF などの複数の形式にビルドできる。</p>

<p>この記事では、2013年6月末時点で実際にPHPのマニュアルをリポジトリから取ってきてビルドする方法を紹介する。PhD は PDF や manpage形式、epub 等多様な形式がビルドできるが、ここでは HTML および chm のみについて触れる。</p>

<h3>a) ビルドするときに使うPHPについて</h3>

<p>まず、PHP をインストールしなければはじまらない。<br/>
PHP は 5.3.x が望ましい。今は 5.4.x や 5.5.0 とかが出ているが、Windows 用ヘルプファイル(chm)をビルドするときに、 5.3 でないと日本語の情報が欠落するバグが PhD には存在するからだ(後述)</p>

<p>chm をビルドするつもりがないなら、PHP 5.4, 5.5 でも差し支えない。
PHP をインストールするときも、PhD のために DOM, libXML2, XMLReader and SQLite3 は有効にしていなければならない。ただ、これらは 5.3 以降はデフォルトで有効になっているので、無効にしないよう注意しよう。</p>

<h3>b) 必要なツールをインストール</h3>

<p>subversionとpearを予めインストールしておいて、PhD と PhD_PHP をpear経由でインストールする。<br/>
PhD_PHP は chm をビルドするのに必要だ。</p>

<pre><code>$ pear version
PEAR Version: 1.9.4
PHP Version: 5.5.0
Zend Engine Version: 2.5.0-dev
$ pear install doc.php.net/PhD doc.php.net/PhD_PHP
phpdocs/PhD can optionally use package "phpdocs/PhD_PEAR"
phpdocs/PhD can optionally use package "phpdocs/PhD_IDE"
phpdocs/PhD can optionally use PHP extension "haru"
phpdocs/PhD_PHP can optionally use PHP extension "haru"
phpdocs/PhD_PHP can optionally use PHP extension "bz2"
phpdocs/PhD_Generic can optionally use PHP extension "haru"
downloading PhD-1.1.6.tgz ...
Starting to download PhD-1.1.6.tgz (47,079 bytes)
.............done: 47,079 bytes
PHP Deprecated:  Assigning the return value of new by reference is deprecated in /home/mumumu/.phpenv/versions/5.5.0/lib/php/PEAR/PackageFile/v2/Validator.php on line 1740

Deprecated: Assigning the return value of new by reference is deprecated in /home/mumumu/.phpenv/versions/5.5.0/lib/php/PEAR/PackageFile/v2/Validator.php on line 1740
downloading PhD_PHP-1.1.6.tgz ...
Starting to download PhD_PHP-1.1.6.tgz (26,028 bytes)
...done: 26,028 bytes
downloading PhD_Generic-1.1.6.tgz ...
Starting to download PhD_Generic-1.1.6.tgz (29,064 bytes)
...done: 29,064 bytes
install ok: channel://doc.php.net/PhD-1.1.6
install ok: channel://doc.php.net/PhD_PHP-1.1.6
install ok: channel://doc.php.net/PhD_Generic-1.1.6
</code></pre>

<h3>c) リポジトリからの取得</h3>

<p>次にマニュアルのソースをリポジトリから取ってくる。作業用のディレクトリを作って、リポジトリをsvnからチェックアウトする。</p>

<p>下記のURL には、 doc-base, en, ja への外部項目が設定されているので、以下のコマンド一つで3つのリポジトリが一気にチェックアウトできる。</p>

<pre><code>$ mkdir phpdoc-ja
$ cd phpdoc-ja
$ svn co http://svn.php.net/repository/phpdoc/modules/doc-ja .
</code></pre>

<h3>d) HTML版の PHPマニュアルをビルドする</h3>

<p>--enable-xml-details は、XMLに万が一文法エラーがあったときに細かい情報を出力するためのモノだ。また、phd は結構メモリを使うので、memory_limit の値を大きめにしておいた方がよいかもしれない。</p>

<pre><code>$ php doc-base/configure.php --with-lang=ja --enable-xml-details
$ phd -d doc-base/.manual.xml
</code></pre>

<p>成功すれば、 output ディレクトリ以下にマニュアルが生成される。</p>

<h3>e) chm 版の PHPマニュアルをビルドする(PHP 5.3.x)</h3>

<p>PHP 5.3.x ならば、以下のコマンドで何も考えなくても chm 版をビルドできる。--enable-chm は、chm特有のコンテンツを生成物に含めるために必要だ。 また、--with-lang や -L オプションで言語の指定も忘れずに。</p>

<p>まあ、--enable-chm がなくても、chm特有のヘルプコンテンツが入らないだけで、皆が見たいメインのコンテンツは欠落しないので、問題はないのだけれども。</p>

<pre><code>$ php doc-base/configure.php --enable-chm --with-lang=ja
$ phd -f chm -P PHP -L ja -d doc-base/.manual.xml
</code></pre>

<p>成功すると、output/php-chm 以下に chm のコンテンツが生成される。</p>

<pre><code>$ ls output/php-chm/
php_manual_ja.hhc  php_manual_ja.hhk  php_manual_ja.hhp  res
</code></pre>

<p>chm 形式のファイルは LZX 形式で圧縮されており、Linux や Mac では chm 形式は生成できないので、以下、Windows 上で chm ファイルをコンパイルする必要がある。</p>

<p>ここからは Windows での作業だ。まず、<a href="http://msdn.microsoft.com/en-us/library/ms669985.aspx">HTML Help Workshop</a> をインストールし、output/php-chm/php_manual_ja.hhp を File -> Open で開く。すると、以下のような画面になるはずだ。</p>

<p><img src="/images/html_help_workshop.png" alt="/images/html_help_workshop.png" /></p>

<p>この状態で、File -> Compile を 選択し、php_manual_ja.hhp を以下のようなダイアログで選び、OK を押すと
php_manual_ja.hhp がある フォルダに php_manual_ja.chm が生成されるはずだ。</p>

<p><img src="/images/html_help_workshop_compile.png" alt="/images/html_help_workshop_compile.png" /></p>

<h3>f) chm 版の PHPマニュアルをビルドする(PHP 5.4.x以降)</h3>

<p>既に述べた通り、PHP 5.4 以降で PhD を使うと、chm のセクションタイトル情報が欠落するバグがある。これについては<a href="https://github.com/php/phd/pull/3">既に修正コードが投稿されている</a> のだがまだ取り込まれていない。よって、PHP 5.4 以降で chm をビルドしたければ、<a href="https://github.com/mumumu/phd">修正されている git のコード</a> を使う。</p>

<p>まずは、既にインストールされている PhD をアンインストールする</p>

<pre><code>$ pear uninstall doc.php.net/PhD doc.php.net/PhD_Generic doc.php.net/PhD_PHP
uninstall ok: channel://doc.php.net/PhD_PHP-1.1.6
uninstall ok: channel://doc.php.net/PhD_Generic-1.1.6
uninstall ok: channel://doc.php.net/PhD-1.1.6
</code></pre>

<p>修正版の git の PhD をインストールする</p>

<pre><code>$ git clone https://github.com/mumumu/phd.git 
$ cd phd
$ pear install package.xml package_generic.xml package_php.xml 
phpdocs/PhD can optionally use package "phpdocs/PhD_PEAR"
phpdocs/PhD can optionally use package "phpdocs/PhD_IDE"
phpdocs/PhD can optionally use PHP extension "haru"
phpdocs/PhD_Generic can optionally use PHP extension "haru"
phpdocs/PhD_PHP can optionally use PHP extension "haru"
phpdocs/PhD_PHP can optionally use PHP extension "bz2"
install ok: channel://doc.php.net/PhD-1.1.7
install ok: channel://doc.php.net/PhD_Generic-1.1.7
install ok: channel://doc.php.net/PhD_PHP-1.1.7
$ cd ..
</code></pre>

<p>あとは普通にビルドし、既に述べたとおりのやり方で、Windows 上で chm をコンパイルすると良い。</p>

<pre><code>$ php doc-base/configure.php --enable-chm --with-lang=ja
$ phd -f chm -P PHP -L ja -d doc-base/.manual.xml
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[phpenv without php-build]]></title>
    <link href="http://mumumu.github.io/blog/2013/06/28/phpenv-without-php-build/"/>
    <updated>2013-06-28T18:09:00+09:00</updated>
    <id>http://mumumu.github.io/blog/2013/06/28/phpenv-without-php-build</id>
    <content type="html"><![CDATA[<p><a href="https://github.com/phpenv/phpenv">https://github.com/phpenv/phpenv</a></p>

<p>来週から Python を仕事で使うというのに、未だに PHP ばかりやっている mumumu です。こんばんは。</p>

<p>さて、複数の PHP のバージョンをひとつのマシンに共存させ、使い分けたいと思った場合に、現在は <a href="https://github.com/CHH/phpenv">CHH 版の phpenv</a> が広まっているような気がする。けれども、自分は Ruby の複数バージョン共存に rbenv を使っているので、それと同じように使える phpenv/phpenv を使ってみたら思ったより便利だったので、ここで紹介する。</p>

<hr />

<p><br /></p>

<p>ここでは、Ubuntu 12.10 (Quantal Quetzal) で、Apache2 のモジュールとしてPHPを複数共存させる手順を以下に示す。まずはインストールから。</p>

<pre><code>$ git clone git://github.com/phpenv/phpenv.git .phpenv
$ echo 'export PATH="$HOME/.phpenv/bin:$PATH"' &gt;&gt; ~/.bashrc
$ echo 'eval "$(phpenv init -)"' &gt;&gt; ~/.bashrc
$ . ~/.bashrc
</code></pre>

<p>これで完了。以下のように出れば成功である。</p>

<pre><code>$ phpenv rehash
phpenv v0.0.3-dev
</code></pre>

<p>インストール可能なバージョンを出してみる。<a href="https://github.com/php/php-src">github の php-src</a> をベースとしたバージョンが全てビルド可能であることが示されるはずだ。</p>

<pre><code>$ phpenv install --releases
phpenv v0.0.3-dev

             init extensions  the clone source for additional extensions                      
             init  the cloning source from php-src Github repo                     
             Fetching  the latest PHP releases from Github repohpenv install --releases

PHP releases as were available on:
2013年  6月 28日 金曜日 18:49:23 JST

php-5.5.0
php-5.5.0RC1
php-5.5.0RC2
php-5.5.0RC3
php-5.5.0alpha1
php-5.5.0alpha2

...

php-5.4.17RC1
php-5.4.16

... 
</code></pre>

<p>PHP を Apacheモジュールとしてインストールしたことがある人なら御存知の通り、Linux での PHP のビルドには Apache モジュールをビルドするための apxs2、そして bison(re2c) 、Cコンパイラその他が必要なことは御存知な通りである。そこで、自分が必要なモノをここでインストールしておく。libcurl4, libreadlineとか、libxslt は自分がいつも設定しているモノなので正直適当である。</p>

<pre><code>$ sudo apt-get install build-essential apache2-mpm-prefork apache2-prefork-dev bison re2c libxml2-dev libcurl4-openssl-dev libmcrypt-dev libreadline-dev libxslt-dev
</code></pre>

<p>さて、各バージョンのビルドである。ビルドオプションは各バージョンでコントロールできる。また、同じバージョンだが、ビルドオプションが違う複数のPHPをインストールすることもできる。ここでは、PHP 5.5.0 をインストールするので、それ用のオプションを設定しよう。</p>

<pre><code>$ cd ~/.phpenv/etc
$ vi php-5.5.Linux.source 
</code></pre>

<p>自分は以下のように設定した。はっきりいって適当である。ここは適宜調整し、ビルドに必要なヘッダファイルは適宜入れてください。</p>

<p>あと、xdebug とかをデフォルトで入れようとしてくれるので、それはコメントアウトした。</p>

<pre><code>CONFIGURE_OPTIONS="--with-apxs2=/usr/bin/apxs2
                   --enable-zend-multibyte
                   --enable-phar
                   --disable-intl
                   --with-libxml
                   --with-openssl
                   --with-kerberos=/usr
                   --with-zlib
                   --enable-mbstring
                   --enable-mbregex
                   --with-xmlrpc
                   --with-xsl
                   --with-pcre-regex
                   --with-curl
                   --with-mcrypt
                   --with-gettext
                   --with-mysql
                   --with-mysqli
                   --with-pdo-mysql
                   --with-readline
                   "

#MANUAL_EXTENSIONS=('http' 'uri-template' 'xdebug')
</code></pre>

<p>そしてビルドし、インストールする。 成功したら、以下のように出るはずだ。</p>

<pre><code>$ phpenv install php-5.5.0

               [Fetching] |1| latest code from Github repo                                 
               [Branching] |2| for a clean build environment                                
               [Patching] |3| Applying patches to the source if any are applicable.        
               [Configuring] |4| build options for selected release                           
               [Compiling] |5| /home/mumumu/.phpenv/versions/5.5.0                          
               make: success                                                          
               make install: success                                                          
               make clean: success                                                          
               [Config ini] |6| appending add-on extention configuration to php.ini          
                   [Pyrus] |7| downloading and installing from http://pear2.php.net/pyrus.phar
               [Extensions] |8| No additional extensions configured for manual installation. 
                   Success: The installation of the php-5.5.0 release was successfully completed.
                   Info: The log files produced by the procedure are available, in the tmp folder, for your review:
                   - Any warnings or messages sent to STDERR was logged to /tmp/phpenv-install-php-5.5.0.20130628182515.log.err
                   - All messages sent to STDOUT was logged to /tmp/phpenv-install-php-5.5.0.20130628182515.log
</code></pre>

<p>インストールできたら、このマシンでは PHP 5.5.0 をメインで使う旨宣言する。</p>

<pre><code>$ phpenv global 5.5.0
phpenv v0.0.3-dev

5.5.0
$ php --version
PHP 5.5.0 (cli) (built with phpenv v0.0.2: Jun 28 2013 18:31:35) 
Copyright (c) 1997-2013 The PHP Group
Zend Engine v2.5.0-dev, Copyright (c) 1998-2013 Zend Technologies
</code></pre>

<p>おっ、そういえば PHP 5.5.0 からは OPcache がデフォルトでビルドされるんだった。それも組み込んでおこう。php.ini もバージョン毎に使い分けができる</p>

<pre><code>$ cd ~/.phpenv/versions/5.5.0/etc/php.ini
</code></pre>

<p>上記に以下を書き加えよう。</p>

<pre><code>zend_extension=/home/mumumu/.phpenv/versions/5.5.0/lib/php/extensions/no-debug-non-zts-20121212/opcache.so
opcache.memory_consumption=128
opcache.interned_strings_buffer=8
opcache.max_accelerated_files=4000
opcache.revalidate_freq=60
opcache.fast_shutdown=1
opcache.enable_cli=1
</code></pre>

<p>書き加えてバージョンを確かめると以下のようになる。</p>

<pre><code>$ php --version
PHP 5.5.0 (cli) (built with phpenv v0.0.2: Jun 28 2013 18:31:35) 
Copyright (c) 1997-2013 The PHP Group
Zend Engine v2.5.0-dev, Copyright (c) 1998-2013 Zend Technologies
    with Zend OPcache v7.0.2-dev, Copyright (c) 1999-2013, by Zend Technologie
</code></pre>

<p>Apache モジュールも入っている。これは各バージョンの libexec ディレクトリ以下に入っているので、それを httpd.conf で切り替えれば Apache でのバージョンの切り替えも可能だ。</p>

<pre><code>$ ls ~/.phpenv/versions/5.5.0/libexec
libphp5.so
</code></pre>

<p>次に、PHP 5.5.0 をデバッグビルドして共存させてみる。ビルドの設定ファイルをコピーし、設定すればよいのだが、設定ファイルは &lt;php major release&gt;-&lt;optional specific build&gt;.&lt;platform&gt;.source という規約に従う必要がある。</p>

<p>ここでは、PHP 5.5.0 のデバッグ版であることを示すために、optional specific build の部分を 550debug としている。ここでは、--enable-debug をオプションに加える。</p>

<pre><code>$ cd ~/.phpenv/etc/
$ cp php-5.5.Linux.source php-5.5-550debug.Linux.source
</code></pre>

<p>そしてインストールする。optional specific build をオプションとして指定し、さっき編集した設定ファイルが使われていることを確かめよう。</p>

<pre><code>$ phpenv install php-5.5.0 550debug
phpenv v0.0.3-dev

Building 5.5.0-550debug with config options from: php-5.5-550debug.Linux.source
....
</code></pre>

<p>ビルドが終わると、ふたつのバージョンが入っていることがわかる。</p>

<pre><code>$ phpenv versions
phpenv v0.0.3-dev

* 5.5.0 (set by /home/mumumu/.phpenv/version)
  5.5.0-550debug
</code></pre>

<p>最後に、5.5.0 のデバッグ版に切り替え、コンパイルオプションを確かめる。--enable-debug が加わっていること、デバッグ版としてバージョンが出ていることがわかる。</p>

<pre><code>$ phpenv local 5.5.0-550debug
$ php --version
PHP 5.5.0 (cli) (built with phpenv v0.0.2: Jun 28 2013 19:27:20) (DEBUG)
Copyright (c) 1997-2013 The PHP Group
Zend Engine v2.5.0-dev, Copyright (c) 1998-2013 Zend Technologies
$ php -i | grep configure
Configure Command =&gt;  './configure'  '--with-apxs2=/usr/bin/apxs2' '--enable-zend-multibyte' '--enable-phar' '--disable-intl' '--with-libxml' '--with-openssl' '--with-kerberos=/usr' '--with-zlib' '--enable-mbstring' '--enable-mbregex' '--with-xmlrpc' '--with-xsl' '--with-pcre-regex' '--with-curl' '--with-mcrypt' '--with-gettext' '--with-mysql' '--with-mysqli' '--with-pdo-mysql' '--with-readline' '--enable-debug' '--with-config-file-path=/home/mumumu/.phpenv/versions/5.5.0-550debug/etc' '--with-config-file-scan-dir=/home/mumumu/.phpenv/versions/5.5.0-550debug/etc/conf.d' '--prefix=/home/mumumu/.phpenv/versions/5.5.0-550debug'
</code></pre>

<hr />

<p><br />
こんな感じだ。自分の中では rbenv と同じ感じで使えて、Apache モジュールの切り替えもうまいこといったのでいい感じである。また、同じバージョンで複数のビルドも共存できる。使っていて楽しい。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[phpdoc_rev_compare.py]]></title>
    <link href="http://mumumu.github.io/blog/2013/06/27/phpdoc-rev-compare-dot-py/"/>
    <updated>2013-06-27T04:31:00+09:00</updated>
    <id>http://mumumu.github.io/blog/2013/06/27/phpdoc-rev-compare-dot-py</id>
    <content type="html"><![CDATA[<p>PHP のドキュメントは毎日凄い勢いで更新されている。これについていくのは <a href="http://d.hatena.ne.jp/takagimasahiro/">高木神</a> も面倒だと思っているはずである。だが、<a href="http://doc.php.net/php/ja/revcheck.php?p=missfiles">revcheck.php</a> をいちいち目視で確認するなんて俺の中では最悪だ。これがどこまで機能してるかだってわからない。</p>

<p>けど、最近 <a href="http://ml.php.gr.jp/mailman/listinfo/php-doc">php-doc-ja ML</a> に来たちょろちょろとした報告を修正だけしているやる気のなさっぷりにも嫌気がさしてきた。やっぱり日々追加されるドキュメントだけでも(たとえそれが未翻訳であっても)追いついておくべきだ。と思った。</p>

<p>それを自分の満足行く形で抽出し、反映するために以下のスクリプトを書いた。最終更新リビジョンだけ見ることが出来れば、少なくともおおまかな差分情報だけは判別できる。これを足がかりにすれば、「片方に全く反映されていないモノ」については自動同期が可能なはずではある。いきなりやると怖いのでやってないけれども。</p>

<script src="https://gist.github.com/mumumu/5870407.js"></script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PHP 5.5.0 with Zend OPcache]]></title>
    <link href="http://mumumu.github.io/blog/2013/06/22/php-5-dot-5-0-with-zend-opcache/"/>
    <updated>2013-06-22T21:51:00+09:00</updated>
    <id>http://mumumu.github.io/blog/2013/06/22/php-5-dot-5-0-with-zend-opcache</id>
    <content type="html"><![CDATA[<p><a href="http://www.php.net/manual/en/book.opcache.php">http://www.php.net/manual/en/book.opcache.php</a></p>

<p>PHP 5.5.0 がリリースされた。finally や yield とか ::class によるネームスペースの解決とか楽しい部分はあれど、まー Zend OPcache は大きいよねってことで、とりあえず試しておく。</p>

<p>./configure に --enable-opcache を付けてビルドすればよい。簡単。
あとは php.ini に 以下を追加すると良い。ただし、 extention= ... ではなく、zend_extention= ... と書かねばならないので注意。</p>

<pre><code>zend_extension=/path/to/php/extensions/no-debug-zts-20121212/opcache.so
opcache.memory_consumption=128
opcache.interned_strings_buffer=8
opcache.max_accelerated_files=4000
opcache.revalidate_freq=60
opcache.fast_shutdown=1
opcache.enable_cli=1
</code></pre>

<p>この状態で、 Intel Core i7 2600s と RAM 16GB , Apache 2.2.22 の環境下で <a href="http://www.mumumu.org/~cinnamon/">http://www.mumumu.org/~cinnamon/</a> (WordPressカスタムサイト) に対して、以下のベンチマークを実行してみた。</p>

<pre><code>ab -c 10 -n 1000 http://localhost/~cinnamon/

This is ApacheBench, Version 2.3 &lt;$Revision: 655654 $&gt;
Copyright 1996 Adam Twiss, Zeus Technology Ltd, http://www.zeustech.net/
Licensed to The Apache Software Foundation, http://www.apache.org/

Benchmarking localhost (be patient)
Completed 100 requests
Completed 200 requests
Completed 300 requests
Completed 400 requests
Completed 500 requests
Completed 600 requests
Completed 700 requests
Completed 800 requests
Completed 900 requests
Completed 1000 requests
Finished 1000 requests

Server Software:        Apache/2.2.22
Server Hostname:        localhost
Server Port:            80

Document Path:          /~cinnamon/
Document Length:        15996 bytes

Concurrency Level:      10
Time taken for tests:   30.007 seconds
Complete requests:      1000
Failed requests:        969
   (Connect: 0, Receive: 0, Length: 969, Exceptions: 0)
Write errors:           0
Total transferred:      16257178 bytes
HTML transferred:       16001178 bytes
Requests per second:    33.33 [#/sec] (mean)
Time per request:       300.066 [ms] (mean)
Time per request:       30.007 [ms] (mean, across all concurrent requests)
Transfer rate:          529.09 [Kbytes/sec] received

Connection Times (ms)
              min  mean[+/-sd] median   max
Connect:        0    0   0.3      0       4
Processing:   227  299  35.3    296     663
Waiting:      208  277  35.3    274     646
Total:        227  299  35.5    296     667

Percentage of the requests served within a certain time (ms)
  50%    296
  66%    305
  75%    311
  80%    315
  90%    329
  95%    349
  98%    387
  99%    423
 100%    667 (longest request)
</code></pre>

<p>PHP 5.4.16 + APC 3.1.13 では以下のようになった。ほとんど変わらない感じだ。</p>

<pre><code>This is ApacheBench, Version 2.3 &lt;$Revision: 655654 $&gt;
Copyright 1996 Adam Twiss, Zeus Technology Ltd, http://www.zeustech.net/
Licensed to The Apache Software Foundation, http://www.apache.org/

Benchmarking localhost (be patient)
Completed 100 requests
Completed 200 requests
Completed 300 requests
Completed 400 requests
Completed 500 requests
Completed 600 requests
Completed 700 requests
Completed 800 requests
Completed 900 requests
Completed 1000 requests
Finished 1000 requests

Server Software:        Apache/2.2.22
Server Hostname:        localhost
Server Port:            80

Document Path:          /~cinnamon/
Document Length:        15993 bytes

Concurrency Level:      10
Time taken for tests:   30.171 seconds
Complete requests:      1000
Failed requests:        965
   (Connect: 0, Receive: 0, Length: 965, Exceptions: 0)
Write errors:           0
Total transferred:      16283497 bytes
HTML transferred:       16000497 bytes
Requests per second:    33.14 [#/sec] (mean)
Time per request:       301.708 [ms] (mean)
Time per request:       30.171 [ms] (mean, across all concurrent requests)
Transfer rate:          527.06 [Kbytes/sec] received

Connection Times (ms)
              min  mean[+/-sd] median   max
Connect:        0    0   0.1      0       2
Processing:   189  301  27.7    297     406
Waiting:      164  278  27.4    275     381
Total:        189  301  27.7    297     406

Percentage of the requests served within a certain time (ms)
  50%    297
  66%    308
  75%    315
  80%    320
  90%    336
  95%    353
  98%    371
  99%    383
 100%    406 (longest request)
</code></pre>
]]></content>
  </entry>
  
</feed>
