<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: debug | mumumu の日記]]></title>
  <link href="http://mumumu.github.io/blog/categories/debug/atom.xml" rel="self"/>
  <link href="http://mumumu.github.io/"/>
  <updated>2022-09-08T21:41:10+09:00</updated>
  <id>http://mumumu.github.io/</id>
  <author>
    <name><![CDATA[mumumu(Yoshinari Takaoka)]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[dpkg related command]]></title>
    <link href="http://mumumu.github.io/blog/2014/08/09/dpkg/"/>
    <updated>2014-08-09T23:37:00+09:00</updated>
    <id>http://mumumu.github.io/blog/2014/08/09/dpkg</id>
    <content type="html"><![CDATA[<p>最近 dpkg コマンドでパッケージ自体のデバッグをすることが多くなった。[Debian|Ubuntu] のアーカイブとはサポートポリシーが異なるアーカイブ のパッケージを採用することで、Pin Priority を設定する機会が増えたからだ。</p>

<p>Debian のパッケージには優先度(Priority) が設定されている。パッケージを apt-get コマンドなどに指定した場合、複数のインストール候補がある場合、優先度が高いモノがインストールされる。よって、、この優先度を操作することで、強制的にダウングレードを行わせたり、特定の条件に当てはまるパッケージのインストールを禁止することすら可能である。</p>

<p>stable や unstable や testing などの ディストリビューションを指定することはまずない (本番環境ではstableでしょJK的な) ので、優先度を操作することが多い。</p>

<p>ここでは、パッケージ単体の情報を扱うのにいくつか重宝しているコマンドがあるので、それをメモしておく。</p>

<h2>dpkg</h2>

<p>dpkg コマンドは、パッケージを扱う基本コマンドである。パッケージのインストールや情報の表示などを行う。dpkg は deb ファイルを扱う。</p>

<p>ちなみに、これを内部的に使うことで apt は作られている。apt関連コマンド (apt-get, apt-cache ...etc) はそれをラップし、パッケージ名だけで扱えるようにしてくれ、依存関係の整理や debファイルの取得をネットワークから行い、dpkg に渡してくれる。</p>

<h3>dpkg -l</h3>

<p>インストール済みのパッケージの一覧を表示する。これを grep することで、特定のパッケージがインストールされているかを知るのによく使う</p>

<h3>dpkg -L</h3>

<p>パッケージ名を与えることで、インストールされたパッケージに含まれるファイル一覧を表示する。<code>rpm -ql</code> に相当する。</p>

<pre><code>$ dpkg -L /usr/bin/sg

/.
/bin
/bin/login
/bin/su
/etc
/etc/login.defs
/etc/pam.d
/etc/pam.d/login
/etc/pam.d/su
/etc/securetty
/usr
/usr/bin
/usr/bin/faillog
/usr/bin/lastlog

...
</code></pre>

<h3>dpkg -S</h3>

<p>ファイルのフルパスを与えることで、そのファイルがどのパッケージに属しているかを表示してくれる。自分はこれは apt-file コマンドでしかこれまでできないものだと思っていたが、インストール済みのファイルであれば dpkg でできたらしい(´ー｀; )</p>

<pre><code>$ dpkg -S /usr/bin/which
debianutils: /usr/bin/which
</code></pre>

<p>逆に、インストールされていないファイルのパッケージを検索したいなら、apt-file とかが便利なようだ。</p>

<h3>dpkg -i</h3>

<p>dpkg は deb ファイルを扱う。それを指定して直接パッケージをインストールしてくれる。但し、依存関係を管理してくれるわけではないので、それが管理できていない、またはよくわからない状態で使うべきではない</p>

<h2>apt</h2>

<p>自分は一般ユーザなので、apt 関連コマンドを欠かすことは出来ない。けど、dpkg だとイマイチな出力をしない部分とかを補うのに使っているというのが正直なところか(*゜ー゜)</p>

<h3>apt-cache show</h3>

<p>パッケージ名を与えることで、その詳細を表示してくれる。apt show や dpkg -s でもほぼ同様の情報が見られたりもするが、日本語で詳細情報の説明が見れたりするので、自分はこれを使っている。</p>

<pre><code>$ apt-cache show build-essential 
Package: build-essential
Priority: optional
Section: devel
Installed-Size: 37
Maintainer: Ubuntu Developers &lt;ubuntu-devel-discuss@lists.ubuntu.com&gt;
Original-Maintainer: Matthias Klose &lt;doko@debian.org&gt;
Architecture: amd64
Version: 11.6ubuntu6
Depends: libc6-dev | libc-dev, gcc (&gt;= 4:4.4.3), g++ (&gt;= 4:4.4.3), make, dpkg-dev (&gt;= 1.13.5)
Filename: pool/main/b/build-essential/build-essential_11.6ubuntu6_amd64.deb
Size: 4838
MD5sum: 6fa3d082885a7440d512236685cd24fd
SHA1: 488c10084cd20cafec7f8b917e752bad45a4f983
SHA256: 50c00d2da704e131855abda2f823f3ac2589ab1579f511ccd005be421f0a3954
Description-ja: build-essential なパッケージの一覧情報
 Debian パッケージを構築するつもりがないのであれば、本パッケージは不要です。 1.14.18 以降の dpkg では、Debian
 パッケージの構築に本パッケージは必須です。
 .

...
</code></pre>

<h3>apt-cache policy</h3>

<p>これがパッケージが衝突したときや特定のパッケージのバージョンが意図したモノにならない場合などに特によく使う。<br/>
パッケージ名を与えない場合は、各パッケージリポジトリ毎の優先度が表示される。</p>

<pre><code>$ apt-cache policy 
パッケージファイル:
 100 /var/lib/dpkg/status
     release a=now
 500 http://dl.google.com/linux/chrome/deb/ stable/main i386 Packages
     release v=1.0,o=Google, Inc.,a=stable,n=stable,l=Google,c=main
     origin dl.google.com

...
</code></pre>

<p>パッケージ名を与えることで、インストール候補とそれぞれに与えられる優先度が表示される。</p>

<pre><code>$ apt-cache policy build-essential
build-essential:
  インストールされているバージョン: 11.6ubuntu6
  候補:               11.6ubuntu6
  バージョンテーブル:
 `***` 11.6ubuntu6 0
        500 http://jp.archive.ubuntu.com/ubuntu/ trusty/main amd64 Packages
        100 /var/lib/dpkg/status
</code></pre>

<h3>apt source</h3>

<p>パッケージ名を与えることで、パッケージのソースパッケージをダウンロードできる。
後述する build-dep と組み合わせると便利。</p>

<pre><code>$ apt source login

 apt source login
パッケージリストを読み込んでいます... 完了
'login' の代わりに 'shadow' をソースパッケージとして選出しています
注意: 'shadow' パッケージは以下の場所の 'Git' バージョン制御システムで保守されています:
https://anonscm.debian.org/git/pkg-shadow/shadow.git
パッケージの最新の (まだリリースされていないかもしれない) 更新を取得するには、
git clone https://anonscm.debian.org/git/pkg-shadow/shadow.git
を使用してください。
1,818 kB のソースアーカイブを取得する必要があります。
取得:1 http://archive.ubuntu.com/ubuntu bionic-updates/main shadow 1:4.5-1ubuntu2 (dsc) [2,426 B]
取得:2 http://archive.ubuntu.com/ubuntu bionic-updates/main shadow 1:4.5-1ubuntu2 (tar) [1,345 kB]
取得:3 http://archive.ubuntu.com/ubuntu bionic-updates/main shadow 1:4.5-1ubuntu2 (diff) [471 kB]
1,818 kB を 8秒 で取得しました (240 kB/s)

dpkg-source: info: extracting shadow in shadow-4.5

...
</code></pre>

<h3>apt build-dep</h3>

<p>パッケージ名を与えることで、そのソースパッケージをビルドするのに必要なパッケージがダウンロードできる</p>

<p><strong> [ Update October 16th 4:23 JST by m ]</strong></p>

<p><code>dpkg -L</code> <code>apt source</code> <code>apt build-dep</code> を追加しました</p>
]]></content>
  </entry>
  
</feed>
