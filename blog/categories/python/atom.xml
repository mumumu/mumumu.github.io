<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: python | mumumu の日記]]></title>
  <link href="http://mumumu.github.io/blog/categories/python/atom.xml" rel="self"/>
  <link href="http://mumumu.github.io/"/>
  <updated>2018-02-25T00:42:31+09:00</updated>
  <id>http://mumumu.github.io/</id>
  <author>
    <name><![CDATA[mumumu(Yoshinari Takaoka)]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Yet Another PEP8 Japanese version]]></title>
    <link href="http://mumumu.github.io/blog/2014/03/26/yet-another-pep8-japanese-version/"/>
    <updated>2014-03-26T22:20:00+09:00</updated>
    <id>http://mumumu.github.io/blog/2014/03/26/yet-another-pep8-japanese-version</id>
    <content type="html"><![CDATA[<p><a href="https://github.com/mumumu/pep8-ja">https://github.com/mumumu/pep8-ja</a></p>

<p>Python のコーディングスタイルのガイドとしてよく知られている PEP8 の日本語訳を公開した。</p>

<p>もともと、社内で PEP8 に従ってコードを書こう (もともと <a href="https://pypi.python.org/pypi/flake8">flake8</a> は採用しているのだけど、ローカルルールとかも含めて明示したいねという話) と言っているときに、日本語版があった方が話が早いと思ったのが翻訳を求めたきっかけである。既存の翻訳があればそれに越したことはなかったのだが、自分がお勧めできるクオリティの翻訳が存在しなかったので、あえて再発明に踏み切った次第だ。</p>

<p>とはいえ、<a href="https://dl.dropboxusercontent.com/u/555254/pep-0008.ja.html">@methane さんの翻訳</a> は一部参考にさせて頂いている。特に最後の<a href="http://docs.python.jp/3.3/tutorial/controlflow.html#function-annotations">関数のアノテーション</a> に関する部分は Python 3.0 以降で有効な機能であり、自分も使ったことがないため正直曲者だった。ちゃんとPythonを書くようになっていろいろ学ぶことは多いが、広く使われているプラクティスの一覧という意味で、この翻訳からは得るものが大いにあった。社内でもこれを生かしていきたいし、他の方のお役に立つことがあれば嬉しい。</p>

<p>github にあがっているので、異論反論オブジェクションについては、github Issue か Pull Request をお願いします(*´～｀)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SQLAlchemy - When do I construct a Session, commit, and close it?]]></title>
    <link href="http://mumumu.github.io/blog/2013/12/30/sqlalchemy-when-do-i-construct-a-session/"/>
    <updated>2013-12-30T05:35:00+09:00</updated>
    <id>http://mumumu.github.io/blog/2013/12/30/sqlalchemy-when-do-i-construct-a-session</id>
    <content type="html"><![CDATA[<p>以下は、<a href="http://www.sqlalchemy.org/">SQLAlchemy</a> の <a href="http://docs.sqlalchemy.org/en/rel_0_8/orm/session.html#when-do-i-construct-a-session-when-do-i-commit-it-and-when-do-i-close-it">When do I construct a Session, when do I commit it, and when do I close it?</a> の全訳である。この文章はデータベースへのクエリを発行するのに使う <a href="http://docs.sqlalchemy.org/en/rel_0_8/orm/session.html#sqlalchemy.orm.session.Session">Sessionクラス</a> を原則的にどう扱うべきかを説明しているが、途中でスコープという概念を持ち込んで説明しているので異常に英語がわかりづらくなっている。</p>

<p>さらに、<a href="http://docs.sqlalchemy.org/en/rel_0_8/orm/session.html#sqlalchemy.orm.scoping.scoped_session">scoped_session</a> というヘルパ関数も持ち込んでいるので、一見しただけだと <a href="http://docs.sqlalchemy.org/en/rel_0_8/orm/session.html#sqlalchemy.orm.scoping.scoped_session">scoped_session</a> がなんのためにあるのか非常にわかりづらくなっている。こうしたことから、全訳してメモとして残しておく。</p>

<h3>まとめ</h3>

<p><strong>・</strong> SQLAlchemy における Session の寿命は、データベースのデータにアクセスしたり管理したりするオブジェクトや関数と切り離し、それらの外部で扱うのが一般的なルール <br/>
<strong>・</strong> Webアプリケーションの場合は、リクエストを処理し始めるときに Session のインスタンスを作り、終わるときに破棄すればよい。通常はフレームワークにそうしたフックが組み込まれているし、それを使うことを推奨 <br/>
<strong>・</strong> 上記のような機構がない場合に、<a href="http://docs.sqlalchemy.org/en/rel_0_8/orm/session.html#sqlalchemy.orm.scoping.scoped_session">scoped_session</a> と呼ばれるヘルパがある。</p>

<p>こうした内容に興味がある人は、以下の全訳を読むとよいと思う。</p>

<h2><br /></h2>

<p></br /></p>

<h3>Sessionクラス のインスタンスを作ったり、commit や close メソッドを発行するタイミングはいつ？</h3>

<pre style="font-size:17px">

要約：

Session の寿命は、データベースのデータにアクセスしたり管理したりするオブジェクトや
関数と 「切り離し、そうした関数やオブジェクトの外部で」 扱うのが一般的なルールです。

</pre>


<p>Session クラスはデータベースへのアクセスがあると思われる操作のはじめに作られるのが一般的です。</p>

<p>Session クラスは、 通信を始めるとすぐにトランザクションを開始します。 'autocommit' フラグを推奨されているデフォルトの 'False' にしたままだと、トランザクションは Session クラスの commit や、 rollback、そして close メソッドが実行されるまで続きます。 Session は再利用されると、以前のトランザクションが終了した後で新しいトランザクションを開始するでしょう。このことから、Session クラスは多くのトランザクションにまたがった寿命を持っているということになります。これらの二つの概念を <strong>トランザクションスコープ</strong> と <strong>セッションスコープ</strong> と呼ぶことにします。</p>

<p>ここでわかるのは、SQLAlchemy は開発者がアプリケーションの中でこれらふたつのスコープをはっきりさせておくことを推奨しているということです。これは、いつスコープが始まり、終了するかということだけでなく、これらのスコープが適用される範囲も含みます。たとえば、Session クラスのインスタンスは特定の関数やメソッド内の実行フローに対してはローカルであるべきですが、アプリケーション全体で使われるものについてはグローバルであるべきですし、これらのふたつの中間にあるインスタンスもあってよいはずです。</p>

<p>このスコープを決めることは、開発者にとって重荷ですし、SQLAlchemy が必然的にデータベースの扱い方に強い影響力を持つ領域です。 変更を集めて一定時間ごとにフラッシュし、メモリの状態をローカルのトランザクションと同期する <a href="http://docs.sqlalchemy.org/en/rel_0_8/glossary.html#term-unit-of-work">unit of work</a> パターンがあります。このパターンは意味のあるトランザクションスコープが存在する場合にだけ有用です。</p>

<p>アプリケーションによって状況は様々ですが、最良な Sessionクラス のスコープを決めるのは通常はあまり難しくありません。</p>

<p>Sessionクラス のインスタンスをトランザクションが終わると同時に破棄する方法がよくとられます。これはトランザクションスコープとセッションスコープが同じであることを意味しています。これは出発点としては良いやり方です。なぜなら、セッションスコープとトランザクションスコープを別に考える必要がないからです。</p>

<p>トランザクションスコープを決めるやり方については万能なものはありませんが、一般的なパターンはあります。特に Webアプリケーションを書いているなら、選択肢は決まっています。</p>

<p>Webアプリケーション は単一の一貫したスコープ - <strong>リクエスト</strong> - の範囲でアプリケーションが既に構築されているため、一番簡単です。このスコープはブラウザからリクエストを受け付け、レスポンスを作るためにそれを処理し、最後にブラウザにレスポンスを返すことまでを表しています。Webアプリケーションを Sessionクラス と統合するのは Sessionクラス のスコープをこのリクエストに結びつけるだけの素直なタスクです。 Session はリクエストがはじまるときに作ることもできますし、必要になったときに lazy initializationパターン を使って作ることもできます。リクエストの処理はさらに続き、アプリケーションロジックが実際のリクエストオブジェクトにアクセスするやり方と似たやり方で Session にアクセスできるシステムもあります。リクエストが終了すると、通常は Webフレームワークが提供しているイベントフックを使って Session も破棄されます。 Session によって使われたトランザクションもこの時点でコミットされます。アプリケーションが明示的にコミットするオプションもありますし、アプリケーションが保証した場合にだけコミットする場合もありますが、想定外のことが起きてリクエストが終了する際に破棄される可能性も常にあります。</p>

<p>ほとんどの Webアプリケーションフレームワークは Session クラスを リクエスト と結びつける基盤を確立しており、Sessionオブジェクト が適切にインスタンス化され、リクエストの終了時に破棄されるようになっています。こうした基盤は Flask と組み合わせて SQLAlchemy を使う場合は <a href="http://pythonhosted.org/Flask-SQLAlchemy/">Flask-SQLAlchemy</a> に、 <a href="http://www.pylonsproject.org/">Pyramid</a> や <a href="http://www.zope.org/">Zope framework</a> と組み合わせて使う場合、<a href="https://pypi.python.org/pypi/zope.sqlalchemy">Zope-SQLAlchemy</a> のようなプロダクトに含まれています。SQLAlchemy はこれらのプロダクトをできる限り使うことを強く推奨しています。</p>

<p>上記のようなライブラリが利用できない場合に、SQLAlchemy は <a href="http://docs.sqlalchemy.org/en/rel_0_8/orm/session.html#sqlalchemy.orm.scoping.scoped_session">scoped_session</a> というヘルパークラスを用意しています。このオブジェクトの使い方に関するチュートリアルが <a href="http://docs.sqlalchemy.org/en/rel_0_8/orm/session.html#contextual-thread-local-sessions">Contextual/Thread-local Sessions</a> のページにあります。このチュートリアルでは、Session を現在のスレッドに関連づける簡単な方法や、Sessionオブジェクト を他のスコープに関連づけるパターンも示しています。</p>

<p>既に述べたとおり、Webアプリケーション以外では、アーキテクチャのパターンがひとつではないために明快なパターンはありません。一番良い戦略は、"オペレーション(操作)" の境界を決め、特定のスレッドが一連の操作をはじめるときに着目し、それが終わるときに commit メソッドを実行することです。以下に例を示します:</p>

<p><strong>・</strong> 子プロセス を fork するバックグラウンドの デーモン は、 Session を子プロセスにローカルなものとして生成し、その子プロセスが実行するジョブが実行されている間それを使い、ジョブが完了したらそれを破棄したいと考えるでしょう。</p>

<p><strong>・</strong> コマンドラインスクリプトのために、アプリケーションはグローバルな Session をひとつ作るでしょう。これはプログラムが開始されるときに作られ、タスクが完了したらすぐに commit メソッドを実行します。</p>

<p><strong>・</strong> GUI インターフェイスを持つアプリケーションでは、Session のスコープは「ボタンを押したとき」のような、ユーザーが生成するイベントの範囲にするのがベストかもしれません。もしくは、明示的なユーザーの操作、たとえば一連のレコードを"取得"し、それを"保存"するといったものに対応付けてもよいかもしれません。</p>

<p>一般的なルールとして、アプリケーションは Session の寿命を特定のデータを扱う関数とは <strong>別に</strong> 管理すべきです。これはデータに特有の操作と、データににアクセスし管理するコンテキストは基本的に別の関心事として扱うと言うことです。</p>

<p>E.g. <strong>真似しないでね</strong></p>

<pre style="font-size:15px">
    ### 以下は **間違ったやり方です** ###

    class ThingOne(object):
        def go(self):
            session = Session()
            try:
                session.query(FooBar).update({"x": 5})
                session.commit()
            except:
                session.rollback()
                raise

    class ThingTwo(object):
        def go(self):
            session = Session()
            try:
                session.query(Widget).update({"q": 18})
                session.commit()
            except:
                session.rollback()
                raise

    def run_my_program():
        ThingOne().go()
        ThingTwo().go()
</pre>


<p>そうではなくて、Session (と、通常はトランザクション)の寿命は、<strong>分離し、外側で扱いましょう</strong></p>

<pre style="font-size:15px">
    ### 以下は **より良い** (ですが唯一ではない) やり方です ###

    class ThingOne(object):
        def go(self, session):
            session.query(FooBar).update({"x": 5})

    class ThingTwo(object):
        def go(self, session):
            session.query(Widget).update({"q": 18})

    def run_my_program():
        session = Session()
        try:
            ThingOne().go(session)
            ThingTwo().go(session)

            session.commit()
        except:
            session.rollback()
            raise
        finally:
            session.close()
</pre>


<p>高度な開発者は、Session やトランザクションおよび例外のハンドリングを、プログラムがやっていることの詳細からできるだけ切り離そうとするでしょう。たとえば、<a href="http://docs.python.org/3/library/contextlib.html#contextlib.contextmanager">context manager</a> を使い、これらをさらに分離することができます。</p>

<pre style="font-size:15px">
    ### 別の (しかし *しつこいが唯一ではない*) やり方 ###

    from contextlib import contextmanager

    @contextmanager
    def session_scope():
        """Provide a transactional scope around a series of operations."""
        session = Session()
        try:
            yield session
            session.commit()
        except:
            session.rollback()
            raise
        finally:
            session.close()


    def run_my_program():
        with session_scope() as session:
            ThingOne().go(session)
            ThingTwo().go(session)
</pre>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Fabric Essentials]]></title>
    <link href="http://mumumu.github.io/blog/2013/11/14/fabric-essentials/"/>
    <updated>2013-11-14T12:36:00+09:00</updated>
    <id>http://mumumu.github.io/blog/2013/11/14/fabric-essentials</id>
    <content type="html"><![CDATA[<iframe src="http://www.slideshare.net/slideshow/embed_code/28142569" width="427" height="356" style="border:1px solid #CCC;border-width:1px 1px 0;margin-bottom:5px" allowfullscreen> </iframe>


<p></p>

<p><a href="http://mumumu.github.io/blog/2013/05/09/fabric/">自宅のサーバで遊びで使っていた</a> <a href="http://fabfile.org">Fabric</a> をいつの間にか業務で使うことになってしまった。<a href="https://github.com/capistrano/capistrano">Capistrano</a> でもよかったのかもしれないが、Python で書けることで皆がインフラ周りのオペレーションに違和感なく手を染められるように、という目的が一番大きかったと思う。Ruby なソフトウェアはそれと心中するような勢いでないと長期的な運用は厳しい、という認識もあったと思う。</p>

<p>使い込んだら使い込んだでそれなりにノウハウはあった。自分でタスクを書いたり、他の人を誘導している間にたまったノウハウを、社内でLTという形で喋ったのが上のプレゼンテーションだ。特に env.disable_known_hosts = True としないと <a href="http://www.lag.net/paramiko/">paramiko</a> がガチで遅くなったことには閉口した。数台で遊ぶレベルとの違いを感じるのがやはり大規模サイトの面白いところだ。あとはこのスライドでも再三強調している通り、ホストの指定は注意を払わないとおかしな挙動にはまりやすいのが中心的なノウハウと言えるかもしれない。</p>

<p>レベルとしては初心者向けにあたるこのスライドに<a href="http://b.hatena.ne.jp/entry/www.slideshare.net/mumumu/fabric-essentials-28142569">なんで反響があるのか</a> 驚かなくもないが、需要があるということなのだろう。</p>

<p>また、このスライドではちらっと自分の所属を公開している。自分の中では所属をインターネットで公開しないことは長年守ってきたポリシーのひとつである。それを転換したことが、現在の所属に満足しており、自信を持つことができていることの現れだと思う。まだまだ至らないところが多い自分を大人のエンジニアとして扱ってくれ、様々なことにチャレンジさせてくれるチームには深く感謝している。</p>

<p>そして、喋ることにも大分慣れてきた。自分の知見を開陳することにはためらいがないこともなかったが、それも最近消えつつある。様々なところからフィードバックを貰えることも楽しめているので、アウトプットする手段の一つとしてやっていきたい。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA['X not in Y' or 'not X in Y'?]]></title>
    <link href="http://mumumu.github.io/blog/2013/09/12/x-not-in-y-or-not-x-in-y/"/>
    <updated>2013-09-12T13:29:00+09:00</updated>
    <id>http://mumumu.github.io/blog/2013/09/12/x-not-in-y-or-not-x-in-y</id>
    <content type="html"><![CDATA[<p><a href="http://docs.python.jp/2/reference/expressions.html#summary">http://docs.python.jp/2/reference/expressions.html#summary</a></p>

<p>Python で Y (辞書またはリスト) に X という要素やキーが「存在しない」ことをどう書くか。
Python では以下の2通りが書ける。</p>

<p>A) not X in Y<br/>
B) X not in Y</p>

<p>現に両方の書き方をしている人が社内ではいた。そこで「どっちかに統一した方がよくね?」という話になった。</p>

<p>A) は "in 演算子" を "not 演算子" で否定したもので、B) は "not in 演算子" をそのまま使ったものである。社内では B) の書き方をしている人が多数を占めた。理由としては以下のようにいくつか考えられる。</p>

<p>a) 演算子の優先順位を考えなくて良い<br/>
b) 英語としても自然<br/>
c) SQL にも not in があるので馴染みがある</p>

<p>個人的には a) が一番大きい。in を not で否定するというのも読めなくもないけど、"not in" がひとつの演算子なんだ、という認識を c) からもしているので、やはり B) が読みやすい。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[phpdoc_rev_compare.py]]></title>
    <link href="http://mumumu.github.io/blog/2013/06/27/phpdoc-rev-compare-dot-py/"/>
    <updated>2013-06-27T04:31:00+09:00</updated>
    <id>http://mumumu.github.io/blog/2013/06/27/phpdoc-rev-compare-dot-py</id>
    <content type="html"><![CDATA[<p>PHP のドキュメントは毎日凄い勢いで更新されている。これについていくのは <a href="http://d.hatena.ne.jp/takagimasahiro/">高木神</a> も面倒だと思っているはずである。だが、<a href="http://doc.php.net/php/ja/revcheck.php?p=missfiles">revcheck.php</a> をいちいち目視で確認するなんて俺の中では最悪だ。これがどこまで機能してるかだってわからない。</p>

<p>けど、最近 <a href="http://ml.php.gr.jp/mailman/listinfo/php-doc">php-doc-ja ML</a> に来たちょろちょろとした報告を修正だけしているやる気のなさっぷりにも嫌気がさしてきた。やっぱり日々追加されるドキュメントだけでも(たとえそれが未翻訳であっても)追いついておくべきだ。と思った。</p>

<p>それを自分の満足行く形で抽出し、反映するために以下のスクリプトを書いた。最終更新リビジョンだけ見ることが出来れば、少なくともおおまかな差分情報だけは判別できる。これを足がかりにすれば、「片方に全く反映されていないモノ」については自動同期が可能なはずではある。いきなりやると怖いのでやってないけれども。</p>

<script src="https://gist.github.com/mumumu/5870407.js"></script>

]]></content>
  </entry>
  
</feed>
