<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[mumumu の日記]]></title>
  <link href="http://mumumu.github.io/atom.xml" rel="self"/>
  <link href="http://mumumu.github.io/"/>
  <updated>2018-02-25T00:42:31+09:00</updated>
  <id>http://mumumu.github.io/</id>
  <author>
    <name><![CDATA[mumumu(Yoshinari Takaoka)]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Linux で Mac のようにスクリーンショットを撮る]]></title>
    <link href="http://mumumu.github.io/blog/2018/02/24/linux-de-mac-falseyounisukurinsiyotutowocuo-ru/"/>
    <updated>2018-02-24T23:29:00+09:00</updated>
    <id>http://mumumu.github.io/blog/2018/02/24/linux-de-mac-falseyounisukurinsiyotutowocuo-ru</id>
    <content type="html"><![CDATA[<p><a href="https://github.com/naelstrof/maim">https://github.com/naelstrof/maim</a></p>

<p>職場で Mac をデフォルトで充てがわれることが多くなり、スクリーンショットを撮るのに Cmd+Shift+4 するのに慣れてしまった。そんな自分が、Linux で同じことをしたくなったときどうするか？</p>

<p>基本的には、以下のようになる。</p>

<p>A) 範囲指定でスクリーンショットを撮ることが出来るプログラムを探し、インストールする<br/>
　 但し、GUI が呼ばれるプログラムは不可。CLI である必要がある<br/>
B) 上記を呼び出すようにショートカットキーを割り当てる</p>

<p>だが、1. を満たすプログラムがなかなか見つからない。どれも GUI を呼ぶか、範囲指定ができてもborderがわからなかったりするなど使いにくいものばかりだった。 <a href="https://wiki.archlinux.org/index.php/taking_a_screenshot">Arch Linux のページ</a> にあるソフトウェアをもろもろ調べ、結局選んだのが maim だった。</p>

<p>だが、こいつが Ubuntu だけ何故かパッケージが用意されていなかった(注1)ので、git リポジトリから最新版をインストールする羽目に。いろいろ依存していてビルドが大変だったが、Ubuntu 16.04 LTS では以下をインストールすれば(注2)、あとは <a href="https://github.com/naelstrof/maim#install-using-cmake-requires-cmake-git-libxrander-libxfixes-libglm">指示通りにすれば</a> インストールできる。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ sudo apt-get install  cmake libxrender-dev libxfixes-dev libglm-dev libglew-dev libglfw3-dev libgles2-mesa-dev libx11-dev libxcomposite-dev</span></code></pre></td></tr></table></div></figure>


<p>あとは、以下のコマンドを Ctrl+Shift+F4 にマッピングした。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ maim -s ~/screenshot-$(date +%s).png</span></code></pre></td></tr></table></div></figure>


<p>自分は KDE を使っているので <a href="https://docs.kde.org/trunk5/en/kde-workspace/kcontrol/khotkeys/manage.html#manage-add-shortcut">Command/URL を選んで Custom Shortcutを割り当てる</a> 方法を使ったが、他のデスクトップ環境でも似たような機能はきっとあるだろう。</p>

<p>(注1) 他の主要ディストリビューションにはある (Debian 含) のに、Ubuntu だけ何故... (´ー｀; )<br/>
(注2) 他に必要なものもあるかもしれない。build-essential とかは当然の前提よ(*゜ー゜)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Slack mobile notifications not working (on Android)]]></title>
    <link href="http://mumumu.github.io/blog/2017/10/23/slack-mobile-notifications-not-working/"/>
    <updated>2017-10-23T00:59:00+09:00</updated>
    <id>http://mumumu.github.io/blog/2017/10/23/slack-mobile-notifications-not-working</id>
    <content type="html"><![CDATA[<p><a href="https://get.slack.help/hc/ja/articles/201398457-%E3%83%A2%E3%83%90%E3%82%A4%E3%83%AB%E9%80%9A%E7%9F%A5">https://get.slack.help/hc/ja/articles/201398457-%E3%83%A2%E3%83%90%E3%82%A4%E3%83%AB%E9%80%9A%E7%9F%A5</a></p>

<p>システム運用時に、何かあった時のアラート等の通知を Slack で受け取っている人もいるだろう。</p>

<p>特に、帰宅後や休暇時に一定の処置が必要なお知らせは重要である。Slack ではチャンネル単位でデスクトップとモバイルの通知の設定が細かく設定できるようになっているので、使い勝手では個人的にあまり困っていない。</p>

<p>だが、自分に合った設定を施しても、一部の Notificaton が受け取れなかったり、通知が遅れたりするとちょっと問題だ。
そういう時は、上記のリンクにあるヘルプの設定を確かめて設定をやり直してもうまくいかないことがある。そうした場合に、自分がやったのは、Android の電源設定を見直すことだった。</p>

<p><img src="http://mumumu.github.io/images/Android_70_battery_setting.jpg" width="540" height="960"/></p>

<p>最近の Android は、電源設定が割と細かくなっており、スリープ時にネットワーク接続が無効になる場合がある。</p>

<p>自分はこれを上記のように常に接続されるように見なおしたところ、Slack のモバイル通知が思ったように受け取れるようになった。
メモ程度の内容だが、これからも多分同じようなことが起こると思うので、ここにメモしておく。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[PATCH] added socks support to Ruby httpclient]]></title>
    <link href="http://mumumu.github.io/blog/2017/10/02/add-socks-support-to-ruby-httpclient/"/>
    <updated>2017-10-02T04:27:00+09:00</updated>
    <id>http://mumumu.github.io/blog/2017/10/02/add-socks-support-to-ruby-httpclient</id>
    <content type="html"><![CDATA[<p><a href="https://github.com/nahi/httpclient/pull/380">https://github.com/nahi/httpclient/pull/380</a></p>

<p>以下のような関係にある3つのホストがあり、server は firewall の外から名前解決もできないし、client からは ssh 経由でしか通信できないとする。また、firewall には curl(1) などのツール類はポリシー上一切入っていないとする。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>+----------+          +-----------+         +------------+
</span><span class='line'>|          |          |           |         |            |
</span><span class='line'>|  client  +----------&gt; firewall  +---------&gt;   server   |
</span><span class='line'>|          |   only   |           |         |            |
</span><span class='line'>+----------+   ssh    +-----------+         +------------+</span></code></pre></td></tr></table></div></figure>


<p>そこで、client から server の状態を http 経由でもろもろ確認したいとする。
以下のようにして、firewall に対して SOCKS プロキシを立てて通信したくなりはしないだろうか。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ ssh -fN -D 9999 firewall
</span><span class='line'>$ curl --socks5-hostname localhost:9999 http://server/</span></code></pre></td></tr></table></div></figure>


<p>ただステータスコードを簡単に確認するためなら、これでも問題ない。だが、特定のプログラミング言語の HTTP通信ライブラリとかを使っていて細かい操作をしている場合、その通信ライブラリが SOCKS プロトコルに対応している必要がある。</p>

<p>自分の場合、上記に類似した状況 (*注1) で Ruby 製のHTTPクライアントライブラリを使っていて、やはり Ruby 側を対応したほうが後々のためにも便利だよな、と思い、 <a href="https://github.com/nahi/httpclient/pull/380">httpclient の gem に対して patch を書いた</a>。これが取り込まれると、以下のようなことができるようになる。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>require 'httpclient'
</span><span class='line'>
</span><span class='line'>#  ssh -fN -D 9999 remote_server
</span><span class='line'>clnt = HTTPClient.new('socks4://localhost:9999')
</span><span class='line'>
</span><span class='line'>#clnt = HTTPClient.new('socks5://localhost:9999')
</span><span class='line'>#clnt = HTTPClient.new('socks5://username:password@localhost:9999')
</span><span class='line'>
</span><span class='line'>#ENV['SOCKS_PROXY'] = 'socks5://localhost:9999'
</span><span class='line'>#clnt = HTTPClient.new
</span><span class='line'>
</span><span class='line'>target = 'http://www.example.com/'
</span><span class='line'>puts clnt.get(target).content
</span><span class='line'>
</span><span class='line'>target = 'https://www.google.co.jp/'
</span><span class='line'>puts clnt.get(target).content</span></code></pre></td></tr></table></div></figure>


<p>つまり、HTTPプロキシと同じ感覚で SOCKS プロキシが設定できるようになる。
凄くニッチなニーズではあるけれども、取り込まれると良いな。</p>

<p>やりたいことがはっきりしていたので、Ruby の経験の多寡に関わらず、意外にすんなり書けた。また、自動テストのためには SOCKSサーバが必要だったことと、プロトコル自体は非常に簡単だったため、それも自前で実装した。 <a href="https://github.com/net-ssh/net-ssh/tree/master/lib/net/ssh/proxy">Net::SSH::Proxy にクライアント実装があり</a>、それを拝借してきたお陰で、そんなに手間はかからなかった。</p>

<p>Ruby を使い始めてそんなに経っていないので、Ruby のコードを書くにあたってのお作法が殆どわからなかった。そこで、 <a href="https://github.com/bbatsov/rubocop">rubocop</a> の助けを借りた。大したチェックはされないだろうとたかを括っていたが、コード上のメトリクスやベストプラクティスのあれこれまで細かく指摘されたのでびっくり。これを使ったお陰で、それなりに自信を持ってコードを書き進めることができた。</p>

<p>特定のプログラミング言語の初心者のうちは、可能であれば lint の類を使いながら書いてみると良いかもしれない。</p>

<p>(*注1) 実際はもっと複雑なのだが、そもそも、こんな状態を作っていること自体が筋が悪くて、firewall の中でなんとかすべき事案である。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[cmos error]]></title>
    <link href="http://mumumu.github.io/blog/2017/05/10/cmos-error/"/>
    <updated>2017-05-10T03:44:00+09:00</updated>
    <id>http://mumumu.github.io/blog/2017/05/10/cmos-error</id>
    <content type="html"><![CDATA[<p><a href="http://mumumu.github.io/blog/2015/01/13/luvbook-j/">http://mumumu.github.io/blog/2015/01/13/luvbook-j/</a></p>

<p>2年前に買った風変わりなノートパソコンだが、CMOS の電池切れエラーが。。(´ー｀; )</p>

<p>通常ならウラ面をパカっと開けて電池を交換するところだ。少し試みたけど挫折... 分解はそもそも想定してないらしい。
よって、大人しくサポートに問い合わせてみることに。このエントリはその症状の記録である。</p>

<ul>
<li>システムを起動すると、"CMOS battery is bad or was recently replaced." と表示される。</li>
</ul>


<p><img src="http://mumumu.github.io/images/CMOS_battery_is_bad.jpg"/></p>

<ul>
<li>上記でOKを押すと "The CMOS defaults were loaded" と表示され、このシステムが続くようならユーザーガイドを見て下さいと表示される</li>
</ul>


<p><img src="http://mumumu.github.io/images/CMOS_default_is_loaded.jpg"/></p>

<p><a href="http://www.mouse-jp.co.jp/mcj_service/mcj_service_01.html">3年サポート</a> に入ってるんで、無償修理になる想定である。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Specific file update checker on Git Repository]]></title>
    <link href="http://mumumu.github.io/blog/2016/10/19/specific-file-update-checker-on-git-repository/"/>
    <updated>2016-10-19T06:26:00+09:00</updated>
    <id>http://mumumu.github.io/blog/2016/10/19/specific-file-update-checker-on-git-repository</id>
    <content type="html"><![CDATA[<p><a href="https://github.com/mumumu/repos_file_update_checker">https://github.com/mumumu/repos_file_update_checker</a></p>

<p>以前 PEP 8 のファイル更新だけをチェックしたくて、 <a href="http://mumumu.github.io/blog/2015/12/26/silly-patch-could-not-detect-repository-update/">Mercurial 向けのファイルチェッカを書いた</a> 。<br/>
今年になって <a href="https://github.com/python/">Python のリポジトリが Github に移行した</a> ため、それが役に立たなくなった。よって、以前書いたものを Git にも対応させ、プラグイン化してかっこ良くしたものが上記である。</p>

<p>みんな大好き Github ... といえども特定ファイルの git log 出力を RSS で吐いてくれたりはしないんですよね。。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Aomuke Gorone Desk]]></title>
    <link href="http://mumumu.github.io/blog/2016/10/12/yang-xiang-kegoroqin-desuku/"/>
    <updated>2016-10-12T05:58:00+09:00</updated>
    <id>http://mumumu.github.io/blog/2016/10/12/yang-xiang-kegoroqin-desuku</id>
    <content type="html"><![CDATA[<p><a href="http://www.thanko.jp/shopdetail/000000002595/">http://www.thanko.jp/shopdetail/000000002595/</a></p>

<p>自分の寝室にはベッドしかなく、ノートPCを膝に乗せて長時間弄るのは非常に苦痛だ。寝たままPCを弄りたい！という動機は誰でも考えるようで、以前は<a href="http://www.thanko.jp/product/872.html">ゴロ寝deスクアルミ</a>というやつを買っていた。</p>

<p>寝たままPCを弄れるという夢が叶うことに加え、デスクスタイル、ソファースタイル、ベッドスタイル等、利用シーンに合わせて形が変えられるというウリに飛びついたわけだが、以下の欠点があった。</p>

<ul>
<li>重い。2.4kg もある</li>
<li>いろいろ形を変えられるのは事実だが、関節が硬く意外に扱いにくい</li>
</ul>


<p>使ってみてわかったのだが、寝たままでPCを打つ姿勢って意外に長く保てない。よって、場合によってはカジュアルに姿勢を動かしたいとか、移動したいとかいうニーズに上記の欠点が仇となり、あまり使わなくなっていた。やっぱ軽くて取り回しの効く奴が欲しいよねー、という思いがあったのは間違いない。</p>

<p><img src="http://mumumu.github.io/images/goronedesk.jpg"/></p>

<p>粗大ごみを始末していた時、この使わなくなったゴロ寝deスクに気づいた。ふっと軽くて取り回しの効く奴、という欲望を思い出し、調べてみると後継のシリーズが出ているではないか。我ながら懲りないなあと思いつつ、早速ポチってしまった。上の画像がそれである。</p>

<p>「腕が疲れそう」とか、「おんなじじゃね」とかいろんなことを言われたが、1kg を切る重さに加え、調整すべき場所も天板と脚の部分と意外に少ないので、個人的には扱いやすくて気に入っている。ただ、新しいものだからプラシーボにかかっている疑いも否定できないので、暫く使ってみるつもりだ。</p>

<p>とりあえずは、10ヶ月ぶりにエントリを書く気になった、というのがこれを買った一番の成果と言えるのではないだろうか(´ー｀; )</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[PATCH] fixed invalid atom-log feed url in file log page]]></title>
    <link href="http://mumumu.github.io/blog/2015/12/29/patch-fixed-invalid-atom-log-feed-url-in-file-log-page/"/>
    <updated>2015-12-29T23:34:00+09:00</updated>
    <id>http://mumumu.github.io/blog/2015/12/29/patch-fixed-invalid-atom-log-feed-url-in-file-log-page</id>
    <content type="html"><![CDATA[<p><a href="https://patchwork.mercurial-scm.org/patch/12367/">https://patchwork.mercurial-scm.org/patch/12367/</a></p>

<p><a href="https://www.mercurial-scm.org/">Mercurial</a> に patch を送ったんだけど、<a href="https://www.mercurial-scm.org/wiki/ContributingChanges#Submission_checklist">patchを投稿するにあたっての規約</a> がいろいろと面倒だった。なんとか順応できたけど、普段から GitHub に慣れきっているとこういうのはつらい。逆に言えば、Pull Request という共通のプロトコルを提供している GitHub の偉大さを体で思い知ったというところか。</p>

<p>やまねさんの物言いは、そういう意味でもっともだと思いました。まる。</p>

<blockquote class="twitter-tweet" lang="en"><p lang="ja" dir="ltr">OSSはライセンシングという共通プロトコルによってリーガルコストを下げた。GitHubはプロジェクト・プロダクトごとの決まりを共通化したプロトコルを導入することでコミュニケーションコストを下げた。OSSという観点ではコストを下げてアウトプットを最大化しているのだから正しい</p>&mdash; henrich (@henrich) <a href="https://twitter.com/henrich/status/681371626437382144">December 28, 2015</a></blockquote>


<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[2015 Retrospective]]></title>
    <link href="http://mumumu.github.io/blog/2015/12/29/2015-retrospective/"/>
    <updated>2015-12-29T22:22:00+09:00</updated>
    <id>http://mumumu.github.io/blog/2015/12/29/2015-retrospective</id>
    <content type="html"><![CDATA[<p>2015年ももう少しで終わろうとしているので、今年がどんな一年だったかを振り返っておこうと思う。</p>

<p>なんといっても、所属が変わったことが一番大きい。それによって、それまで手掛けてきたものに対する要求も大きくなった。環境が全く異なり、期限もあり、頑張る人もいない中で、いろんなバランスをとりながらチームをリードすることが一番大変だった。そんな中でも成果をきちんと出せたのは自分の中で大きな財産になると思うし、技術的にも得たものは大きい。勿論、これはチームメンバの誰一人が欠けても、成し遂げられなかったことである。縁があって一緒にやってきた方々皆に感謝したい。</p>

<p>所属が変わったと書いた。これによって組織のカルチャーも大幅に変わった。ビジネスサイドを理解し、判断の根拠を他人任せにせず、自分なりのベストを（例え間違っていても）アウトプットすることが求められるようになった。これによって「情報を隠さず、誰が相手でも正直ベースでぶつかる」という自分のスタイルを全力で貫いても困らなくなった。それが、チームのリードに苦労した中でもうまくやってこられた大きな要因かもしれない。</p>

<p>技術的には、<a href="http://mumumu.github.io/blog/2015/01/03/look-back-at-2014/">去年やっていたこと</a> に加えて、プロダクトのスケールを妨げるあらゆる要因を潰すことを延々とやっていた。<a href="http://redis.io/topics/cluster-spec">Redis Cluster</a> の導入とか、プロダクトのコアのチューニングとか、バッチの速度を数十倍にしたりとか、それは本当にスケールするの？ とコードを書く人たちに問い続けるとか、そんな感じ。プロダクトに機能を付け加える人達の裏で、それの邪魔をしないようにするための基盤を作ることだけに徹した。</p>

<blockquote><p>忙しさが大きくなると、周囲の動向に関する視野や問題意識が狭くなると思う。問題意識と視野あってこそのアウトプットなのだから、余裕を持って楽しもう。それが2015年の目標である。</p></blockquote>

<p>去年こんなふうに書いたが、忙しさに紛れて、今年も余裕がなかったと言わざるを得ない。それは今年のエントリが少ないことを見ても明らかだろう。ただ、技術を楽しみながら、書いたコードを外部に還元することは忘れなかったつもりだ。 <a href="http://redis.io/">Redis</a> のクライアント周辺については、必要に迫られながらも良い成果を出せたと思うけど、インプットもアウトプットもまだまだ足りないなあと思う。切磋琢磨する相手も増えたので、いろいろな人と協働しながらもっと楽しみたい。</p>

<p>来年はエンジニアとしての立ち位置が問われる一年になるはずだ。純粋に手を動かし、楽しむだけでなく、明確になりつつあるストロングポイントを踏まえて、どうしていくか。なんらかの答えを出さねばならない。</p>

<p>本当の意味での正念場といえよう。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[update test environment of redis-py]]></title>
    <link href="http://mumumu.github.io/blog/2015/12/29/update-test-environment-of-redis-py/"/>
    <updated>2015-12-29T21:56:00+09:00</updated>
    <id>http://mumumu.github.io/blog/2015/12/29/update-test-environment-of-redis-py</id>
    <content type="html"><![CDATA[<p>2015年は Redis と戯れていた一年と言っても良い。<a href="http://redis.io/topics/cluster-spec">Redis Cluster</a> を Production 環境に導入し、<a href="https://github.com/Grokzen/redis-py-cluster">redis-py-cluster</a> に <a href="https://github.com/Grokzen/redis-py-cluster/pull/76">READONLY 対応の patch を送った</a> りした。</p>

<p>Redis Cluster は Redis 3.0 で加わった新機能であり、もうじき 3.2 が出ようとしている。そんな状態の中で 2.8 でしかテストされていないのはどうなの？ と思い、以下の 2つの patch を送っておいた。</p>

<ul>
<li>redis-py のビルド環境を 3.0 対応にする

<ul>
<li><a href="https://github.com/andymccurdy/redis-py/pull/697">https://github.com/andymccurdy/redis-py/pull/697</a></li>
</ul>
</li>
<li>RESTORE コマンドに 3.0 で加わった REPLACE修飾子に対応

<ul>
<li><a href="https://github.com/andymccurdy/redis-py/pull/698">https://github.com/andymccurdy/redis-py/pull/698</a></li>
</ul>
</li>
</ul>


<p>特に前者は、2.8 によるテスト環境をごっそり 3.0 に入れ替えるものなので、割とドラスティックである。Redis 側で 2.8 をいつまでサポートするのか、というポリシーが明確ではないので、取り込むタイミングは流動的だと思われる。</p>

<p>ただ、3.x 特有の機能が増えていく中で、一石を投じる必要としては今がいいんじゃないかな、と思った次第である。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Silly patch - could not detect repository update]]></title>
    <link href="http://mumumu.github.io/blog/2015/12/26/silly-patch-could-not-detect-repository-update/"/>
    <updated>2015-12-26T03:06:00+09:00</updated>
    <id>http://mumumu.github.io/blog/2015/12/26/silly-patch-could-not-detect-repository-update</id>
    <content type="html"><![CDATA[<p>PEP8 のファイル更新を監視するのに、 <a href="https://github.com/mumumu/mercurial_file_update_checker">Mercurial リポジトリ更新チェックツール</a> というのを書いている。コミットメールや <a href="https://hg.python.org/">hg.python.org</a> の RSS を見れたりすれば一番良いのだが、前者はPEPの編集者や開発者にしか開放されておらず、後者はファイル単位の更新を見せるようにはできていない(*1) 。このツールはファイル単位での更新があったらメールしてくれるというもので、自分のニーズを満たすための単純なものだ。</p>

<p>ところがこのツール、ちゃんと動いていなかった。更新がリモートリポジトリにあってもちゃんと検知できていなかったのだ。ダメぢゃん！<br/>
原因は <a href="https://www.mercurial-scm.org/wiki/GitConcepts#Command_equivalence_table">git pull にあたるコマンド</a> を hg update だと思い込んでいたというもので、単純に Mercurial の理解不足である。</p>

<p>なので、こういうお馬鹿な patch を書いてしまうんですね。ハイ(´ー｀; )<br/>
誰の役にも立たないんで、ますますお馬鹿度が増すという...</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='diff'><span class='line'><span class="gh">diff --git a/rev_update_checker.py b/rev_update_checker.py</span>
</span><span class='line'><span class="gh">index b6109fe..af39899 100644</span>
</span><span class='line'><span class="gd">--- a/rev_update_checker.py</span>
</span><span class='line'><span class="gi">+++ b/rev_update_checker.py</span>
</span><span class='line'><span class="gu">@@ -22,7 +22,7 @@ class TargetRepository(object):</span>
</span><span class='line'>
</span><span class='line'>     def update(self):
</span><span class='line'>         os.chdir(self.repository_path)
</span><span class='line'><span class="gd">-        subprocess.check_output([&#39;hg&#39;, &#39;update&#39;])</span>
</span><span class='line'><span class="gi">+        subprocess.check_output([&#39;hg&#39;, &#39;pull&#39;, &#39;-u&#39;])</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'> class TargetFileRevision(object):
</span></code></pre></td></tr></table></div></figure>


<p>(*1) だったら hgweb に patch 投げればいいやん、と思って、<a href="http://patchwork.serpentine.com/patch/12367/">投げておきました</a> ...</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[restore github page from source branch]]></title>
    <link href="http://mumumu.github.io/blog/2015/04/26/restore-github-page-from-source-branch/"/>
    <updated>2015-04-26T07:17:00+09:00</updated>
    <id>http://mumumu.github.io/blog/2015/04/26/restore-github-page-from-source-branch</id>
    <content type="html"><![CDATA[<p>github page を <a href="http://octopress.org/">Octopress</a> で公開している人は、きっと master が HTML と CSS だけで出来たリポジトリを github に持っており、かつ source ブランチでそれを生成するための Rakefile や <code>_config.yml</code>、ブログエントリの markdown、テーマなどをバックアップしているはずだ。</p>

<p>では、何かの拍子にブログを書く環境を壊してしまい、source ブランチから復活させなければならなくなった場合はどうだろうか。今朝ちょうどそういう状況に陥ってしまい、復旧に少し手間取ったのでメモしておく。</p>

<p>要するに clone した後、 <code>_deploy</code> ディレクトリを生成し、そこで git リポジトリを再初期化し、github page へのリポジトリを remote に加えるだけだ。 要するに、 <a href="https://github.com/imathis/octopress/blob/5080107cb9e4c7bad8feb719f7e57c1da3b20c65/Rakefile#L352">setup_github_pagesタスクの後半</a> を真似ただけである。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git clone git@github.com:mumumu/mumumu.github.io.git blog
</span><span class='line'>$ cd blog
</span><span class='line'>$ mkdir _deploy
</span><span class='line'>$ cd _deploy
</span><span class='line'>$ git init
</span><span class='line'>$ git remote add origin git@github.com:mumumu/mumumu.github.io</span></code></pre></td></tr></table></div></figure>


<p>あとは <code>rake new_post["some title"]</code> で記事を書き、<code>rake generate</code> や <code>rake gen_deploy</code> の操作でいつも通り記事が公開できるようになる。</p>

<p>こうしたリストアの操作と、 <code>git push origin source</code> というバックアップ操作が面倒くさかったので、以下のような patch を Rakefile に足しておいた。</p>

<p>まずは バックアップの操作が <code>rake gen_deploy</code>後に自動で行われるようにした。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='diff'><span class='line'><span class="gu">@@ -252,16 +252,38 @@ multitask :push do</span>
</span><span class='line'>   Rake::Task[:copydot].invoke(public_dir, deploy_dir)
</span><span class='line'>   puts &quot;\n## copying #{public_dir} to #{deploy_dir}&quot;
</span><span class='line'>   cp_r &quot;#{public_dir}/.&quot;, deploy_dir
</span><span class='line'><span class="gi">+  message = &quot;Site updated at #{Time.now.utc}&quot;</span>
</span><span class='line'>   cd &quot;#{deploy_dir}&quot; do
</span><span class='line'>     system &quot;git add .&quot;
</span><span class='line'>     system &quot;git add -u&quot;
</span><span class='line'>     puts &quot;\n## Commiting: Site updated at #{Time.now.utc}&quot;
</span><span class='line'><span class="gd">-    message = &quot;Site updated at #{Time.now.utc}&quot;</span>
</span><span class='line'>     system &quot;git commit -m \&quot;#{message}\&quot;&quot;
</span><span class='line'>     puts &quot;\n## Pushing generated #{deploy_dir} website&quot;
</span><span class='line'>     system &quot;git push origin #{deploy_branch} --force&quot;
</span><span class='line'><span class="gi">+  end</span>
</span><span class='line'><span class="gi">+</span>
</span><span class='line'><span class="gi">+  cd &quot;#{deploy_dir}/../source&quot; do</span>
</span><span class='line'><span class="gi">+    system &quot;git add *&quot;</span>
</span><span class='line'><span class="gi">+    puts &quot;\n## Commiting: Site updated at #{Time.now.utc}&quot;</span>
</span><span class='line'><span class="gi">+    system &quot;git commit -m \&quot;#{message}\&quot;&quot;</span>
</span><span class='line'><span class="gi">+    puts &quot;\n## Pushing source branch as backup&quot;</span>
</span><span class='line'><span class="gi">+    system &quot;git push origin source&quot;</span>
</span><span class='line'>     puts &quot;\n## Github Pages deploy complete&quot;
</span><span class='line'>   end
</span><span class='line'><span class="gi">+</span>
</span><span class='line'><span class="gi">+end</span>
</span></code></pre></td></tr></table></div></figure>


<p>github page のソースを clone した後、<code>_deploy</code> ディレクトリを再生成し、master として remote を足すタスクも追加した。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='diff'><span class='line'><span class="gi">+</span>
</span><span class='line'><span class="gi">+desc &quot;restore github pages directory&quot;</span>
</span><span class='line'><span class="gi">+task :restore_github_pages_directory do</span>
</span><span class='line'><span class="gi">+  puts &quot;\n## Re-creating deploy directory&quot;</span>
</span><span class='line'><span class="gi">+  rm_rf deploy_dir</span>
</span><span class='line'><span class="gi">+  mkdir_p deploy_dir</span>
</span><span class='line'><span class="gi">+</span>
</span><span class='line'><span class="gi">+  cd &quot;#{deploy_dir}&quot; do</span>
</span><span class='line'><span class="gi">+    repo_url = &quot;git@github.com:mumumu/mumumu.github.io&quot;</span>
</span><span class='line'><span class="gi">+    system &quot;git init&quot;</span>
</span><span class='line'><span class="gi">+    system &quot;git remote add origin #{repo_url}&quot;</span>
</span><span class='line'><span class="gi">+  end</span>
</span><span class='line'><span class="gi">+ end</span>
</span><span class='line'>
</span><span class='line'> desc &quot;Update configurations to support publishing to root or sub directory&quot;
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[mini router plan]]></title>
    <link href="http://mumumu.github.io/blog/2015/04/26/mini-router-plan/"/>
    <updated>2015-04-26T03:48:00+09:00</updated>
    <id>http://mumumu.github.io/blog/2015/04/26/mini-router-plan</id>
    <content type="html"><![CDATA[<p><a href="http://blog.livedoor.jp/connect_staff/archives/1804038.html">http://blog.livedoor.jp/connect_staff/archives/1804038.html</a></p>

<p>自分が使っているプロバイダが突如サービス終了するというアナウンスがあった。<a href="http://www.din.or.jp/">代替のプロバイダはもうほぼ決めた</a> のだけど、これを機会にブロードバンドルータもどうにかしようという気になった。<a href="http://jp.yamaha.com/products/network/routers/rtx1210/">RTX1210</a> を中古で買うか、マシンをもう一台組んで <a href="http://vyos.net/wiki/Main_Page">VyOS</a> を入れてしまう案の二つが上がったが、結果として後者、つまりマシンを新たにもう一台組むことにした。</p>

<p>・ ルータに使うマシンなので、大きなマシンは組みたくない<br/>
　・ Mini-ITX がいいんじゃないですかね<br/>
・ ファンレスがいいよね。じゃあ前欲しがってた Atom C2000 シリーズあたりでいきますか</p>

<p>という思考から、以下のような構成を考えたのでメモしておく。メモリを16GBにする必要がどこにあるのかというツッコミは禁止します。</p>

<p>Mini-ITX はそのコンパクトさ故に電源やケースの組み合わせに注意が必要で、特にケースと電源選びは非常に面倒であった。電源は SFX電源とか考えるのが面倒だったので ATX 電源、かつ奥行き140mm で300W 以下、となると玄人指向のものしか残らなかった。Mini-ITX のケースは自分が考える最小のコンパクトさと電源のサイズをベースに考えていった結果、バランスのとれたモノとして Silverstone のものを選んだということである。</p>

<p>85k は安くはない。RTX1210 はこれより中古で安く買えるのでかつては迷ったが、やはり手元の自由度を選ぶと自作が最高だ。いつ組もうかなぁ(´ー｀；)</p>

<table>
<thead>
<tr>
<th>パーツ項目 </th>
<th> 品名 </th>
<th> 価格</th>
</tr>
</thead>
<tbody>
<tr>
<td>CPU        </td>
<td>  Intel Atom processor C2750, SoC, FCBGA 1283, 20W 8-Core </td>
<td> -</td>
</tr>
<tr>
<td>マザーボード </td>
<td> <a href="http://www.supermicro.com/products/motherboard/atom/x10/a1sai-2750f.cfm">Supermicro A1SAi-2750F</a> </td>
<td> 54,647</td>
</tr>
<tr>
<td>RAM        </td>
<td>  <a href="https://www.ark-pc.co.jp/i/11702324/">SanMax Technologies SMD-N16G28ECTP-16KL-D</a> </td>
<td> 17,990</td>
</tr>
<tr>
<td>ケース      </td>
<td> <a href="https://www.ark-pc.co.jp/i/15300667/">Silverstone SST-SG13B</a> </td>
<td> 7,538</td>
</tr>
<tr>
<td>電源       </td>
<td> <a href="http://www.kuroutoshikou.com/product/power/atx/krpw-pb300w_85_/">玄人志向 80PLUS BRONZE取得 ATX電源 300W KRPW-PB300W/85+</a>  </td>
<td> 5,674</td>
</tr>
<tr>
<td>合計       </td>
<td>                                  </td>
<td> 85,849</td>
</tr>
</tbody>
</table>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Luvbook J]]></title>
    <link href="http://mumumu.github.io/blog/2015/01/13/luvbook-j/"/>
    <updated>2015-01-13T00:34:00+09:00</updated>
    <id>http://mumumu.github.io/blog/2015/01/13/luvbook-j</id>
    <content type="html"><![CDATA[<p><a href="http://www.mouse-jp.co.jp/m-book/luvbookj/series.html">http://www.mouse-jp.co.jp/m-book/luvbookj/series.html</a></p>

<p>以前ノートPCを買ってから4年、また訳のわからぬノートPCを買ってしまった。後悔はない。</p>

<p>A) 林檎は嫌 (天の邪鬼的思考)<br/>
B) メモリは16GB載せたい (前より上のものを思考)<br/>
C) 割とHDDが遅くてイラっとする事案が頻発していたので、SSD 必須<br/>
D) 前も13型だったので、それより大きなものは嫌だなー</p>

<p>A) にこだわらなければ <a href="https://www.apple.com/jp/macbook-pro/">林檎で満たせる事案</a> である。この点に妙にこだわった結果、かつメモリが16GB載せられるものを探した結果、Thinkpad X230 とか 今回買った BTO パソコンしか道はなかったのである。そして天の邪鬼思考がさらに発揮された結果、マウスコンピューターのものが残ったというわけだ。</p>

<p>2560 x 1440 とかいうかつて経験のない解像度も冒険という意味で後押しした。だが、Linux を入れた結果、林檎には不要な妙な調整が必要なことに気がついた。アプリを通常の状態で使うと、あまりにも小さく見えるのである(´ー｀；)</p>

<p>自分は割とフォントを大きめにして使うので調整するのはいつものことなのだが、ブラウザで妙にツールバーが小さくなったりして非常に使いづらい見た目になってしまったり、サードパーティのアプリのアイコンとかがやたらと小さく見えるといった具合である。特にブラウザで適当な動きをするものがなかなか見つからないのには閉口した。</p>

<p>いろいろと探した結果、Firefox の <a href="https://support.mozilla.org/en-US/questions/963759">デフォルトのCSS を調整する</a> ことでデフォルトのズームレベルを 1.6 倍にして快適なレベルに調整することで事なきを得た。</p>

<p>フォントはやはり自分的には <a href="http://mix-mplus-ipa.sourceforge.jp/migu/">Migu 1M</a> が相性がよい。 <a href="https://github.com/yascentur/Ricty">Ricty</a> 使ってる人多いんでしょうけど、ターミナルと相性良いですかねあれ？(´ー｀；)</p>

<p>とはいえ、非常にマシンのパフォーマンスは良く、キーボードも押す深さが自分にとっては快適で、ちょっと大きな打鍵音がするがちょうど良い。前の <a href="http://www.asus.com/jp/Notebooks_Ultrabooks/U31F/">ASUS U31F</a> と同様、長く使うことになろう。しばらく宜しく！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[baby shutdown my server]]></title>
    <link href="http://mumumu.github.io/blog/2015/01/05/baby-shutdowns-my-server/"/>
    <updated>2015-01-05T00:01:00+09:00</updated>
    <id>http://mumumu.github.io/blog/2015/01/05/baby-shutdowns-my-server</id>
    <content type="html"><![CDATA[<p><img src="http://mumumu.github.io/images/baby_close_to_my_server.jpg" /></p>

<p>赤子に Xeonサーバをシャットダウンされました。。上の画像のような感じでサーバを置いていて、なんか触ってるなーと思ったらLEDの光が消えてました。。</p>

<p>名前解決結果のキャッシュサーバをこのサーバが兼ねていたのでネットが不通になったり、ビルドが走っていたWindowsサーバが電プチによって起動しなくなったりなど、少なからざる被害をもたらしました。</p>

<p>「子供の手の届かない場所に置きましょう」という注意書き一般を鼻で笑い飛ばしていたのを死ぬほど後悔した次第です(´ー｀; )</p>

<p>この注意書きで言うところの「子供」とは、赤ちゃんが歩き始める時期が既に該当してるんですね。世界中の赤子と向き合うエンジニアに <strong>「サーバは子供の手の届かない場所に置きましょう」</strong> と注意喚起したいと思います...</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[look back at 2014]]></title>
    <link href="http://mumumu.github.io/blog/2015/01/03/look-back-at-2014/"/>
    <updated>2015-01-03T02:19:00+09:00</updated>
    <id>http://mumumu.github.io/blog/2015/01/03/look-back-at-2014</id>
    <content type="html"><![CDATA[<p>2014年を簡潔にまとめると、以下の３つに明け暮れた一年だった。</p>

<p>A) ピアレビュー<br/>
B) 少しのコード書き<br/>
C) 本番運用</p>

<p>特にピアレビューは比率が大きくて、人のコードを見て指摘したりされたりしていた。そうする中で、事故ることが許されない環境にふわっと本番のことを考えない無責任なコードを投げつけられそうになって憤慨するという事案が多発した。別に仲が悪くなったというわけではないのだが、2015年はそういった部分を少しずつ言語化してアウトプットできればと思う。</p>

<p>DevOps って言うけれども、いくら仲良くしても無責任にコードを投げつけられるだけでは逆効果なだけだ。仲良くするにはお互いの意識が近くなければならないので、Ops の意識を何度でも言語化して伝えていかなければならないのだと強く感じた。</p>

<p>あと、ひとつのまとまったプロダクトをローンチまで持って行ったのもひとつの成果だ。大規模なトラフィックと24時間365日戦う中でまだまだやることはあるけれども、一区切りを付けたことは素直に喜びたい。赤子と向き合うのが一番大変な時期にぶつかり、相方には様々な迷惑を掛けた。バランスを取るのはなかなか大変だったけれども、相方を一人で孤立させないことを心掛けたい。</p>

<p>忙しさが大きくなると、周囲の動向に関する視野や問題意識が狭くなると思う。問題意識と視野あってこそのアウトプットなのだから、余裕を持って楽しもう。それが2015年の目標である。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Silly patch - Octopress does not open new entry file immediately]]></title>
    <link href="http://mumumu.github.io/blog/2014/08/30/silly-patch/"/>
    <updated>2014-08-30T20:50:00+09:00</updated>
    <id>http://mumumu.github.io/blog/2014/08/30/silly-patch</id>
    <content type="html"><![CDATA[<p>github Page を github で管理するためのソフトウェア <a href="http://octopress.org/">Octopress</a> では、新しいエントリを書くときにいちいちエディタを開くコマンドを打たねばならない。最初は気にならなかったのだが、<a href="http://mumumu.github.io/blog/2014/08/17/ranger-file-manager-with-vi-keybindings/">ranger を導入したあたり</a> からそれがどうにも煩雑だと感じるようになった。</p>

<p>こんなの誰でも思いつくだろと思って Octopress の github を調べると、<a href="https://github.com/imathis/octopress/pull/749">こんな Pull Request</a> が見つかり...</p>

<p>これをよく読んでいくと以下のように、「俺たちの流儀ぢゃねえからこれに類する提案は皆 Reject だよハゲ」という話になっていて...そもそもこういう路線の patch は本体に取り込まれる見込みがないことが明確になっていた(´ー｀; )</p>

<p><a href="https://github.com/imathis/octopress/pull/749#issuecomment-11451776">https://github.com/imathis/octopress/pull/749#issuecomment-11451776</a></p>

<p>なので、仕方なく自分は必要な部分のみ糞 patch を当てるわけです。。</p>

<p><a href="https://github.com/mumumu/mumumu.github.io/commit/a139bf79c3af9346c1f607ef04acce6e442a32df">https://github.com/mumumu/mumumu.github.io/commit/a139bf79c3af9346c1f607ef04acce6e442a32df</a></p>

<p>またもや下らぬ patch を書いてしまった。。これもうシリーズ化しようかなって思うんですけど、どないですかね(´ー｀; )</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[change of mind]]></title>
    <link href="http://mumumu.github.io/blog/2014/08/30/change-of-mind/"/>
    <updated>2014-08-30T05:46:00+09:00</updated>
    <id>http://mumumu.github.io/blog/2014/08/30/change-of-mind</id>
    <content type="html"><![CDATA[<p><a href="http://dictionary.goo.ne.jp/leaf/jn2/200443/m0u/">http://dictionary.goo.ne.jp/leaf/jn2/200443/m0u/</a></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>へん-せつ【変節】
</span><span class='line'>
</span><span class='line'>［名］(スル)節義を変えること。信念・主義・主張などを変えること。</span></code></pre></td></tr></table></div></figure>


<p>昨日の出来事で何かが変わったのは確かだ(一行独白</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ranger - file manager with VI keybindings]]></title>
    <link href="http://mumumu.github.io/blog/2014/08/17/ranger-file-manager-with-vi-keybindings/"/>
    <updated>2014-08-17T00:58:00+09:00</updated>
    <id>http://mumumu.github.io/blog/2014/08/17/ranger-file-manager-with-vi-keybindings</id>
    <content type="html"><![CDATA[<p><a href="http://ranger.nongnu.org/">http://ranger.nongnu.org/</a></p>

<p>比較的大きな規模のプロジェクトになると、ディレクトリツリーの階層もそれなりに深くなる場合が多い。しかも同じディレクトリに常にとどまって作業をしていればいいという話にならなくなってくる。ディレクトリを移動する度に cd /path/to/foo とか cd /another/path/fuga とかもう打ってられないことに気がついた。</p>

<p>vim とかのエディタ内のファイルマネージャーを使えばいいじゃない、と一時期は考えて <a href="http://www.vim.org/scripts/script.php?script_id=1075">netrw</a> とか <a href="https://github.com/scrooloose/nerdtree">nerdtree</a> とかを我慢して使っていた時期もあったが、どうもディレクトリの移動の度に<a href="https://www.google.co.jp/search?q=%E3%83%83%E3%82%BF%E3%83%BC%E3%83%B3%EF%BC%81">リターンキーを「ッターン！」</a> しなければいけないのがつらく、結局使わなくなった。</p>

<p>ある日、コンソール上で画像ファイルをプレビューしたくなった。そんなソフトはないかと捜していたら、<a href="http://ranger.nongnu.org/">ranger</a> にいきついた。いざ使ってみると、ファイルやディレクトリの移動、そしてファイルを開く操作が全て hjkl だけで済むのが異常に心地よいことに気がついた。<a href="http://w3m.sourceforge.net/">w3m</a> を入れて設定に一行足せば、以下のように画像ファイルのプレビューも出来る。cd /path/to/foo/bar するよりはかなり速い。 また、ranger を開きながら Shift+s でシェルに落ちることもできる。これもかなり楽。</p>

<p><img src="http://mumumu.github.io/images/ranger.png"/></p>

<p>また、vim の場合だと、ファイルを開きながら、別のファイルを選んで開くときも、 netrw とかを使わずに ranger を使えるモードがあることに気がついた。<a href="https://github.com/hut/ranger/blob/master/doc/examples/vim_file_chooser.vim">こんな設定</a> を ~/.vimrc に書けば、&lt;leader&gt;r を押すことで ranger でファイルを選ぶことができる。</p>

<p>そんな感じで喜んで使っていたのだが、Pythonのファイルを扱っていると若干問題があった。types.py というファイルがディレクトリに存在すると、それを vim から ranger で開こうとした時点でエラーになってしまうのだ。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Traceback (most recent call last):
</span><span class='line'>  File "C:\Python27\lib\site.py", line 62, in &lt;module&gt;
</span><span class='line'>    import os
</span><span class='line'>  File "C:\Python27\lib\os.py", line 398, in &lt;module&gt;
</span><span class='line'>    import UserDict
</span><span class='line'>  File "C:\Python27\lib\UserDict.py", line 83, in &lt;module&gt;
</span><span class='line'>    import _abcoll
</span><span class='line'>  File "C:\Python27\lib\_abcoll.py", line 70, in &lt;module&gt;
</span><span class='line'>    Iterable.register(str)
</span><span class='line'>  File "C:\Python27\lib\abc.py", line 107, in register
</span><span class='line'>    if not isinstance(subclass, (type, types.ClassType)):
</span><span class='line'>AttributeError: 'module' object has no attribute 'ClassType'</span></code></pre></td></tr></table></div></figure>


<p>これは ranger 自体が Python で書かれていることと、<a href="http://stackoverflow.com/questions/17717090/attributeerror-module-object-has-no-attribute-classtype">Pythonインタプリタ自体の問題</a> が重なったことによって起こることだった。けれども、今の職場で主に使われているのは Python なので、どうにかして解消しなければ ranger は使えないという話になってしまう。</p>

<p>仕方なく、<a href="https://github.com/mumumu/ranger/commit/d4791468897ab4136edceabe640360110dfd810e">細かすぎて伝わらないpatch</a> を書いた... vim ファイルだけではなくて、コアのイベントアクションにまで手を加えているので、全く受け入れられる気がしない... それに vim 連携のためだけに types.py を特別扱いするとかアフォかと。俺がメンテナなら多分 Reject するだろうなと思いつつ、fork したコードだけは置いておくのであった(´ー｀; )</p>

<p><a href="https://github.com/mumumu/ranger">https://github.com/mumumu/ranger</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Virtualbox USB device on Windows guest]]></title>
    <link href="http://mumumu.github.io/blog/2014/08/17/virtualbox-usb-device-on-windows-guest/"/>
    <updated>2014-08-17T00:55:00+09:00</updated>
    <id>http://mumumu.github.io/blog/2014/08/17/virtualbox-usb-device-on-windows-guest</id>
    <content type="html"><![CDATA[<p><a href="http://www.igune.com/20140529/1637-40/">http://www.igune.com/20140529/1637-40/</a></p>

<p>VirtualBox で Windows ゲストを動かしていると毎回忘れるのが、vboxusers グループに自分のユーザを追加することである。これがないと Windowsゲストで USB機器が認識されない。</p>

<p>けど、apt パッケージとかでアップデートの管理をしていると、アップデートの度にグループ設定が消えてしまうことがあった。仕方なく以下を .bashrc に追加したが、いかにもダサい... virtualbox がインストール済みなのが前提だし(´ー｀; )</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>VBOXGROUP="vboxusers"
</span><span class='line'>id | grep $VBOXGROUP &gt; /dev/null 2&gt;&1
</span><span class='line'>if [ $? -ne 0 ]; then
</span><span class='line'>    echo "$USER added to $VBOXGROUP group"
</span><span class='line'>    usermod -G $VBOXGROUP $USER
</span><span class='line'>fi</span></code></pre></td></tr></table></div></figure>


<p>はじめに示したリンクは Windows7 で説明されているが、それに限った話ではない。Windows 8.1 でも起こる話だ。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[dpkg related command]]></title>
    <link href="http://mumumu.github.io/blog/2014/08/09/dpkg/"/>
    <updated>2014-08-09T23:37:00+09:00</updated>
    <id>http://mumumu.github.io/blog/2014/08/09/dpkg</id>
    <content type="html"><![CDATA[<p>最近 dpkg コマンドでパッケージ自体のデバッグをすることが多くなった。[Debian|Ubuntu] のアーカイブとはサポートポリシーが異なるアーカイブ のパッケージを採用することで、Pin Priority を設定する機会が増えたからだ。</p>

<p>Debian のパッケージには優先度(Priority) が設定されている。パッケージを apt-get コマンドなどに指定した場合、複数のインストール候補がある場合、優先度が高いモノがインストールされる。よって、、この優先度を操作することで、強制的にダウングレードを行わせたり、特定の条件に当てはまるパッケージのインストールを禁止することすら可能である。</p>

<p>stable や unstable や testing などの ディストリビューションを指定することはまずない (本番環境ではstableでしょJK的な) ので、優先度を操作することが多い。</p>

<p>ここでは、パッケージ単体の情報を扱うのにいくつか重宝しているコマンドがあるので、それをメモしておく。</p>

<h2>dpkg</h2>

<p>dpkg コマンドは、パッケージを扱う基本コマンドである。パッケージのインストールや情報の表示などを行う。dpkg は deb ファイルを扱う。</p>

<p>ちなみに、これを内部的に使うことで apt は作られている。apt関連コマンド (apt-get, apt-cache ...etc) はそれをラップし、パッケージ名だけで扱えるようにしてくれ、依存関係の整理や debファイルの取得をネットワークから行い、dpkg に渡してくれる。</p>

<h3>dpkg -l</h3>

<p>インストール済みのパッケージの一覧を表示する。これを grep することで、特定のパッケージがインストールされているかを知るのによく使う</p>

<h3>dpkg -S</h3>

<p>ファイルのフルパスを与えることで、そのファイルがどのパッケージに属しているかを表示してくれる。自分はこれは apt-file コマンドでしかこれまでできないものだと思っていたが、インストール済みのファイルであれば dpkg でできたらしい(´ー｀; )</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ dpkg -S /usr/bin/which
</span><span class='line'>debianutils: /usr/bin/which</span></code></pre></td></tr></table></div></figure>


<p>逆に、インストールされていないファイルのパッケージを検索したいなら、apt-file とかが便利なようだ。</p>

<h3>dpkg -i</h3>

<p>dpkg は deb ファイルを扱う。それを指定して直接パッケージをインストールしてくれる。但し、依存関係を管理してくれるわけではないので、それが管理できていない、またはよくわからない状態で使うべきではない</p>

<h2>apt</h2>

<p>自分は一般ユーザなので、apt 関連コマンドを欠かすことは出来ない。けど、dpkg だとイマイチな出力をしない部分とかを補うのに使っているというのが正直なところか(*゜ー゜)</p>

<h3>apt-cache show</h3>

<p>パッケージ名を与えることで、その詳細を表示してくれる。apt show や dpkg -s でもほぼ同様の情報が見られたりもするが、日本語で詳細情報の説明が見れたりするので、自分はこれを使っている。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ apt-cache show build-essential 
</span><span class='line'>Package: build-essential
</span><span class='line'>Priority: optional
</span><span class='line'>Section: devel
</span><span class='line'>Installed-Size: 37
</span><span class='line'>Maintainer: Ubuntu Developers &lt;ubuntu-devel-discuss@lists.ubuntu.com&gt;
</span><span class='line'>Original-Maintainer: Matthias Klose &lt;doko@debian.org&gt;
</span><span class='line'>Architecture: amd64
</span><span class='line'>Version: 11.6ubuntu6
</span><span class='line'>Depends: libc6-dev | libc-dev, gcc (&gt;= 4:4.4.3), g++ (&gt;= 4:4.4.3), make, dpkg-dev (&gt;= 1.13.5)
</span><span class='line'>Filename: pool/main/b/build-essential/build-essential_11.6ubuntu6_amd64.deb
</span><span class='line'>Size: 4838
</span><span class='line'>MD5sum: 6fa3d082885a7440d512236685cd24fd
</span><span class='line'>SHA1: 488c10084cd20cafec7f8b917e752bad45a4f983
</span><span class='line'>SHA256: 50c00d2da704e131855abda2f823f3ac2589ab1579f511ccd005be421f0a3954
</span><span class='line'>Description-ja: build-essential なパッケージの一覧情報
</span><span class='line'> Debian パッケージを構築するつもりがないのであれば、本パッケージは不要です。 1.14.18 以降の dpkg では、Debian
</span><span class='line'> パッケージの構築に本パッケージは必須です。
</span><span class='line'> .
</span><span class='line'>
</span><span class='line'>...</span></code></pre></td></tr></table></div></figure>


<h3>apt-cache policy</h3>

<p>これがパッケージが衝突したときや特定のパッケージのバージョンが意図したモノにならない場合などに特によく使う。<br/>
パッケージ名を与えない場合は、各パッケージリポジトリ毎の優先度が表示される。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ apt-cache policy 
</span><span class='line'>パッケージファイル:
</span><span class='line'> 100 /var/lib/dpkg/status
</span><span class='line'>     release a=now
</span><span class='line'> 500 http://dl.google.com/linux/chrome/deb/ stable/main i386 Packages
</span><span class='line'>     release v=1.0,o=Google, Inc.,a=stable,n=stable,l=Google,c=main
</span><span class='line'>     origin dl.google.com
</span><span class='line'>
</span><span class='line'>...</span></code></pre></td></tr></table></div></figure>


<p>パッケージ名を与えることで、インストール候補とそれぞれに与えられる優先度が表示される。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ apt-cache policy build-essential
</span><span class='line'>build-essential:
</span><span class='line'>  インストールされているバージョン: 11.6ubuntu6
</span><span class='line'>  候補:               11.6ubuntu6
</span><span class='line'>  バージョンテーブル:
</span><span class='line'> `***` 11.6ubuntu6 0
</span><span class='line'>        500 http://jp.archive.ubuntu.com/ubuntu/ trusty/main amd64 Packages
</span><span class='line'>        100 /var/lib/dpkg/status</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
</feed>
